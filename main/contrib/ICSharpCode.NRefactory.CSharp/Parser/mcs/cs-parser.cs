// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011 Xamarin Inc.
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation, savedOpenLocation, savedCloseLocation;
		Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
		Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeCommas = new List<Location> ();
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_namespace",
//t    "using_namespace : USING namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING error",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon",
//t    "namespace_name : IDENTIFIER",
//t    "namespace_name : namespace_name DOT IDENTIFIER",
//t    "namespace_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$23 method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS $$25 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$26 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$26 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$27 OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$31 accessor_declarations $$32 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$33 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
//t    "$$34 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$39 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$40 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$41 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$42 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$43 :",
//t    "$$44 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$45 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "$$46 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "constructor_initializer : error",
//t    "$$47 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$49 :",
//t    "$$50 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$51 :",
//t    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$52 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
//t    "$$53 :",
//t    "event_variable_initializer : $$53 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$54 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
//t    "$$55 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$56 :",
//t    "$$57 :",
//t    "$$58 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$56 OPEN_BRACE $$57 opt_enum_member_declarations $$58 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$59 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$59 ASSIGN constant_expression",
//t    "$$60 :",
//t    "$$61 :",
//t    "$$62 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$60 opt_formal_parameter_list CLOSE_PARENS $$61 opt_type_parameter_constraints_clauses $$62 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$63 :",
//t    "type_declaration_name : IDENTIFIER $$63 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$64 :",
//t    "new_expr_type : $$64 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$65 :",
//t    "typeof_expression : TYPEOF $$65 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$66 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$66 block",
//t    "$$67 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$67 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$68 :",
//t    "anonymous_method_signature : OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$69 :",
//t    "lambda_expression_body_simple : $$69 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$70 :",
//t    "lambda_expression : IDENTIFIER ARROW $$70 lambda_expression_body",
//t    "$$71 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "$$73 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
//t    "$$74 :",
//t    "$$75 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$74 opt_lambda_parameter_list CLOSE_PARENS ARROW $$75 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$76 :",
//t    "$$77 :",
//t    "$$78 :",
//t    "$$79 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$76 type_declaration_name $$77 opt_class_base opt_type_parameter_constraints_clauses $$78 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$79 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_class_base : COLON type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$80 :",
//t    "block : OPEN_BRACE $$80 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$81 :",
//t    "block_prepared : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
//t    "block_prepared : CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : IDENTIFIER error",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$82 :",
//t    "labeled_statement : identifier_inside_body COLON $$82 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$83 :",
//t    "block_variable_declaration : variable_type identifier_inside_body $$83 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
//t    "$$84 :",
//t    "block_variable_declaration : CONST variable_type identifier_inside_body $$84 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "semicolon_or_handle_error_close_brace : SEMICOLON",
//t    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : ASSIGN error",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$85 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$85 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$86 :",
//t    "switch_section : switch_labels $$86 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$87 :",
//t    "for_statement : FOR open_parens_any $$87 for_statement_cont",
//t    "$$88 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$88 for_statement_condition",
//t    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
//t    "$$89 :",
//t    "for_statement_condition : opt_for_condition SEMICOLON $$89 for_statement_end",
//t    "for_statement_condition : opt_for_condition CLOSE_PARENS",
//t    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_end : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$90 :",
//t    "for_initializer : variable_type identifier_inside_body $$90 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$91 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$91 embedded_statement",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$92 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$92 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$93 :",
//t    "unsafe_statement : UNSAFE $$93 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$94 :",
//t    "$$95 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$94 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$95 embedded_statement",
//t    "$$96 :",
//t    "$$97 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$96 using_initialization CLOSE_PARENS $$97 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$98 :",
//t    "from_clause : FROM identifier_inside_body IN $$98 expression_or_error",
//t    "$$99 :",
//t    "from_clause : FROM type identifier_inside_body IN $$99 expression_or_error",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : error",
//t    "$$100 :",
//t    "select_or_group_clause : SELECT $$100 expression_or_error",
//t    "$$101 :",
//t    "$$102 :",
//t    "select_or_group_clause : GROUP $$101 expression_or_error $$102 BY expression_or_error",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$103 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$103 expression_or_error",
//t    "$$104 :",
//t    "where_clause : WHERE $$104 expression_or_error",
//t    "$$105 :",
//t    "$$106 :",
//t    "$$107 :",
//t    "join_clause : JOIN identifier_inside_body IN $$105 expression_or_error ON $$106 expression_or_error EQUALS $$107 expression_or_error opt_join_into",
//t    "$$108 :",
//t    "$$109 :",
//t    "$$110 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$108 expression_or_error ON $$109 expression_or_error EQUALS $$110 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$111 :",
//t    "orderby_clause : ORDERBY $$111 orderings",
//t    "orderings : order_by",
//t    "$$112 :",
//t    "orderings : order_by COMMA $$112 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$113 :",
//t    "orderings_then_by : orderings_then_by COMMA $$113 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$114 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$114 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$115 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$115 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$116 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$116 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$117 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$117 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 390 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 391 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 408 "cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 453 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 39:
  case_39();
  break;
case 40:
#line 619 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 41:
  case_41();
  break;
case 49:
  case_49();
  break;
case 50:
  case_50();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
#line 735 "cs-parser.jay"
  { yyVal = "event"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 58:
#line 736 "cs-parser.jay"
  { yyVal = "return"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 59:
  case_59();
  break;
case 60:
#line 753 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 61:
  case_61();
  break;
case 62:
#line 768 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 63:
  case_63();
  break;
case 65:
#line 796 "cs-parser.jay"
  { yyVal = null; HadAttributeParens = false;  }
  break;
case 66:
  case_66();
  break;
case 67:
#line 808 "cs-parser.jay"
  { yyVal = null; }
  break;
case 68:
  case_68();
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
#line 852 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 74:
#line 860 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
#line 886 "cs-parser.jay"
  { yyVal = null; }
  break;
case 78:
#line 890 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 79:
#line 894 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 82:
#line 906 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 83:
#line 910 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 95:
  case_95();
  break;
case 96:
#line 941 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 97:
  case_97();
  break;
case 98:
  case_98();
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
#line 984 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 103:
  case_103();
  break;
case 104:
  case_104();
  break;
case 107:
#line 1025 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 108:
#line 1029 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
  case_109();
  break;
case 110:
#line 1045 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 111:
  case_111();
  break;
case 112:
  case_112();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
#line 1124 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 125:
#line 1154 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 126:
#line 1158 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
  case_127();
  break;
case 128:
#line 1171 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 129:
  case_129();
  break;
case 132:
#line 1190 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 133:
#line 1194 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
  case_134();
  break;
case 135:
#line 1210 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 140:
  case_140();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
#line 1281 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 144:
#line 1285 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 145:
  case_145();
  break;
case 146:
#line 1311 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 147:
  case_147();
  break;
case 148:
#line 1321 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
  case_150();
  break;
case 151:
  case_151();
  break;
case 153:
#line 1386 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 154:
#line 1390 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 156:
  case_156();
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
#line 1462 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 164:
#line 1466 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
#line 1541 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 172:
  case_172();
  break;
case 173:
#line 1582 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 175:
#line 1590 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
#line 1683 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
#line 1737 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 192:
  case_192();
  break;
case 193:
#line 1766 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 194:
  case_194();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
#line 1915 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
  case_211();
  break;
case 212:
#line 1954 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 215:
#line 1966 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 216:
#line 1970 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 217:
#line 1977 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 218:
#line 1981 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 223:
#line 1989 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 224:
#line 1993 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 225:
#line 1997 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 226:
#line 2003 "cs-parser.jay"
  {
	  }
  break;
case 227:
  case_227();
  break;
case 229:
#line 2036 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 231:
  case_231();
  break;
case 232:
#line 2052 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 233:
  case_233();
  break;
case 235:
#line 2098 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 236:
#line 2099 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 237:
#line 2100 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 238:
#line 2101 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 239:
#line 2102 "cs-parser.jay"
  { yyVal = Operator.OpType.True; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 240:
#line 2103 "cs-parser.jay"
  { yyVal = Operator.OpType.False; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 241:
#line 2105 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 242:
#line 2106 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 243:
#line 2108 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 244:
#line 2109 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 245:
#line 2110 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 246:
#line 2111 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 247:
#line 2112 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 248:
#line 2113 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 249:
#line 2114 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 250:
#line 2115 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 251:
#line 2116 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 252:
#line 2117 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 253:
#line 2118 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 254:
#line 2119 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 255:
#line 2120 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 256:
#line 2121 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 257:
#line 2128 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 258:
  case_258();
  break;
case 259:
#line 2147 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 260:
  case_260();
  break;
case 261:
  case_261();
  break;
case 262:
  case_262();
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 268:
#line 2253 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 271:
#line 2265 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 272:
  case_272();
  break;
case 273:
#line 2275 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 274:
  case_274();
  break;
case 275:
  case_275();
  break;
case 276:
  case_276();
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 285:
#line 2393 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 286:
  case_286();
  break;
case 289:
#line 2410 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 290:
#line 2414 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 291:
  case_291();
  break;
case 292:
#line 2427 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
#line 2452 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 313:
  case_313();
  break;
case 314:
  case_314();
  break;
case 317:
#line 2627 "cs-parser.jay"
  {
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
#line 2685 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 324:
  case_324();
  break;
case 325:
#line 2704 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 326:
  case_326();
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
#line 2810 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 340:
  case_340();
  break;
case 341:
  case_341();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 346:
  case_346();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
  case_354();
  break;
case 356:
#line 2932 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 357:
#line 2939 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 359:
  case_359();
  break;
case 361:
  case_361();
  break;
case 363:
  case_363();
  break;
case 365:
#line 2977 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 366:
  case_366();
  break;
case 367:
#line 2996 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 368:
  case_368();
  break;
case 369:
#line 3005 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 370:
#line 3009 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 371:
  case_371();
  break;
case 372:
  case_372();
  break;
case 373:
  case_373();
  break;
case 374:
#line 3043 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
#line 3044 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
#line 3045 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
#line 3046 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
#line 3047 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 379:
#line 3048 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 381:
#line 3053 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 382:
#line 3054 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 383:
#line 3055 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 384:
#line 3056 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 385:
#line 3057 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 386:
#line 3058 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 387:
#line 3059 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 3060 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 3061 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
  case_410();
  break;
case 411:
  case_411();
  break;
case 415:
#line 3108 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3112 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3113 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
  case_422();
  break;
case 423:
#line 3146 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 424:
  case_424();
  break;
case 425:
  case_425();
  break;
case 426:
  case_426();
  break;
case 427:
  case_427();
  break;
case 428:
#line 3181 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 429:
  case_429();
  break;
case 430:
#line 3189 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 431:
  case_431();
  break;
case 432:
  case_432();
  break;
case 433:
#line 3205 "cs-parser.jay"
  { yyVal = null; }
  break;
case 435:
  case_435();
  break;
case 436:
  case_436();
  break;
case 437:
#line 3228 "cs-parser.jay"
  { yyVal = null; }
  break;
case 438:
#line 3232 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 441:
  case_441();
  break;
case 442:
  case_442();
  break;
case 443:
#line 3265 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 449:
#line 3295 "cs-parser.jay"
  { yyVal = null; }
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
#line 3347 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 465:
  case_465();
  break;
case 466:
#line 3392 "cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 467:
#line 3396 "cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
#line 3442 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 475:
#line 3450 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
#line 3470 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 479:
#line 3477 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 487:
#line 3543 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 492:
#line 3570 "cs-parser.jay"
  { yyVal = null; }
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 505:
  case_505();
  break;
case 506:
#line 3648 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 507:
#line 3652 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 508:
#line 3659 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 509:
#line 3663 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
#line 3707 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 515:
  case_515();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
#line 3827 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 531:
  case_531();
  break;
case 532:
#line 3840 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 533:
  case_533();
  break;
case 534:
#line 3857 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 536:
#line 3865 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 540:
#line 3891 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 541:
#line 3895 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 542:
  case_542();
  break;
case 543:
  case_543();
  break;
case 545:
#line 3923 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 546:
#line 3927 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 547:
#line 3931 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 548:
#line 3935 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
#line 3939 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
#line 3943 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 556:
  case_556();
  break;
case 557:
#line 3975 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 558:
  case_558();
  break;
case 559:
#line 3984 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3988 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
  case_562();
  break;
case 563:
  case_563();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 570:
  case_570();
  break;
case 571:
  case_571();
  break;
case 573:
  case_573();
  break;
case 575:
  case_575();
  break;
case 577:
  case_577();
  break;
case 579:
  case_579();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 585:
  case_585();
  break;
case 586:
#line 4112 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
#line 4209 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 603:
  case_603();
  break;
case 606:
#line 4225 "cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 607:
  case_607();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
#line 4270 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 617:
#line 4284 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 625:
#line 4309 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 630:
#line 4338 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 631:
#line 4351 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 632:
  case_632();
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 636:
#line 4396 "cs-parser.jay"
  { yyVal = null; }
  break;
case 637:
#line 4398 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[0+yyTop])); }
  break;
case 638:
  case_638();
  break;
case 639:
#line 4411 "cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 661:
#line 4537 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
#line 4630 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 671:
#line 4634 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 672:
#line 4641 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 677:
#line 4686 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 687:
#line 4735 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 688:
#line 4739 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 694:
#line 4773 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 695:
#line 4777 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 731:
  case_731();
  break;
case 732:
  case_732();
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
#line 4921 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 736:
#line 4925 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 737:
  case_737();
  break;
case 739:
  case_739();
  break;
case 740:
#line 4946 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 746:
  case_746();
  break;
case 748:
  case_748();
  break;
case 750:
  case_750();
  break;
case 751:
  case_751();
  break;
case 752:
  case_752();
  break;
case 756:
  case_756();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
#line 5081 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 762:
  case_762();
  break;
case 767:
  case_767();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
#line 5131 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 773:
  case_773();
  break;
case 774:
#line 5141 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 775:
#line 5142 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 778:
  case_778();
  break;
case 781:
  case_781();
  break;
case 782:
  case_782();
  break;
case 783:
  case_783();
  break;
case 784:
#line 5217 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
#line 5268 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 793:
#line 5272 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
#line 5301 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
#line 5362 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 809:
  case_809();
  break;
case 810:
#line 5377 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 813:
#line 5398 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 814:
  case_814();
  break;
case 815:
  case_815();
  break;
case 816:
  case_816();
  break;
case 817:
#line 5431 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 822:
#line 5452 "cs-parser.jay"
  { yyVal = null; }
  break;
case 824:
#line 5457 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 828:
  case_828();
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 852:
#line 5658 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 860:
#line 5708 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 861:
  case_861();
  break;
case 862:
#line 5727 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 863:
  case_863();
  break;
case 864:
#line 5745 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 865:
#line 5752 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 866:
  case_866();
  break;
case 867:
#line 5762 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 879:
  case_879();
  break;
case 880:
#line 5867 "cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
#line 5972 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 891:
  case_891();
  break;
case 892:
#line 5988 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 896:
  case_896();
  break;
case 897:
#line 6035 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 905:
  case_905();
  break;
case 911:
#line 6094 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 912:
  case_912();
  break;
case 913:
#line 6113 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 924:
  case_924();
  break;
case 925:
#line 6267 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 926:
  case_926();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 933:
#line 6313 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
#line 6330 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 940:
  case_940();
  break;
case 941:
  case_941();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 953:
#line 6452 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 954:
#line 6459 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
case 957:
#line 6476 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 958:
#line 6480 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 959:
  case_959();
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 962:
  case_962();
  break;
case 964:
#line 6516 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 966:
#line 6524 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 967:
#line 6528 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 968:
#line 6535 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 970:
  case_970();
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 398 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
		}
	  }

void case_8()
#line 410 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 430 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 463 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 471 "cs-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
	  }

void case_19()
#line 478 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 490 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_21()
#line 503 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_22()
#line 531 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_23()
#line 536 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_24()
#line 548 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_25()
#line 553 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_26()
#line 560 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_39()
#line 598 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_41()
#line 620 "cs-parser.jay"
{
#if FULL_AST
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
#endif
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_49()
#line 655 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attributeCommas.Count > 0) {
			lbag.AppendTo (sect, attributeCommas);
			attributeCommas.Clear ();
		}
	  }

void case_50()
#line 666 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_51()
#line 682 "cs-parser.jay"
{
		lexer.parsing_attribute_section = true;
		savedOpenLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_52()
#line 687 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_53()
#line 695 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_54()
#line 702 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		}
 	  }

void case_55()
#line 718 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[0+yyTop]) }));
		}
	  }

void case_56()
#line 730 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
		savedCloseLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_59()
#line 738 "cs-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_61()
#line 755 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);
		attributeCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = attrs;
	  }

void case_63()
#line 770 "cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
		if (arguments != null) {
			attributeArgumentCommas.Insert (0, savedAttrParenOpenLocation);
			attributeArgumentCommas.Add (savedAttrParenCloseLocation);
			lbag.AddLocation (yyVal, attributeArgumentCommas);
			attributeArgumentCommas.Clear ();
		} else if (HadAttributeParens) {
			lbag.AddLocation (yyVal, savedAttrParenOpenLocation, savedAttrParenCloseLocation);
		}
	  }

void case_66()
#line 798 "cs-parser.jay"
{
		savedAttrParenOpenLocation = GetLocation (yyVals[-2+yyTop]);
		savedAttrParenCloseLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }

void case_68()
#line 810 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_69()
#line 816 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_70()
#line 822 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_71()
#line 837 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_75()
#line 862 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_76()
#line 872 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_95()
#line 926 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_97()
#line 943 "cs-parser.jay"
{ 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_98()
#line 949 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }

void case_99()
#line 962 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_100()
#line 967 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
#line 973 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_103()
#line 991 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_104()
#line 1004 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_109()
#line 1034 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_111()
#line 1047 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
#line 1053 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_115()
#line 1068 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_116()
#line 1083 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_117()
#line 1096 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_118()
#line 1107 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_121()
#line 1130 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_122()
#line 1136 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_127()
#line 1163 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_129()
#line 1173 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_134()
#line 1199 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_136()
#line 1212 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_137()
#line 1218 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_140()
#line 1228 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_141()
#line 1237 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = (Method) yyVals[0+yyTop];
		async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_type.AddMember (m);
	  }

void case_142()
#line 1247 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			lbag.AppendToMember (method, savedLocation); /* semicolon*/
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_145()
#line 1287 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop], yyVals[0+yyTop] != null);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_147()
#line 1314 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_149()
#line 1323 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[-1+yyTop] != null);

		if (yyVals[-1+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[-1+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_150()
#line 1350 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_151()
#line 1369 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop], false);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_156()
#line 1396 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_157()
#line 1402 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_158()
#line 1411 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_159()
#line 1420 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_160()
#line 1428 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_161()
#line 1441 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_162()
#line 1448 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_165()
#line 1468 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_166()
#line 1476 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		parameterListCommas.Clear ();
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_167()
#line 1485 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_168()
#line 1509 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_169()
#line 1518 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_170()
#line 1528 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_172()
#line 1543 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_176()
#line 1592 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_177()
#line 1616 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_178()
#line 1623 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_179()
#line 1630 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = Parameter.Modifier.This;
	  }

void case_180()
#line 1643 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_181()
#line 1649 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_182()
#line 1657 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_183()
#line 1665 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_184()
#line 1671 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
		savedLocation = GetLocation (yyVals[-1+yyTop]);
	  }

void case_186()
#line 1688 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_187()
#line 1699 "cs-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_188()
#line 1704 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_189()
#line 1718 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_190()
#line 1725 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_192()
#line 1739 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_194()
#line 1768 "cs-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_199()
#line 1787 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_200()
#line 1801 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }

void case_201()
#line 1822 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Get, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Get, GetModifierLocations (), savedLocation);
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_202()
#line 1846 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lexer.PropertyParsing = false;
	  }

void case_203()
#line 1872 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Set, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Set, GetModifierLocations (), savedLocation);
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_205()
#line 1897 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = null;
	  }

void case_206()
#line 1902 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_208()
#line 1917 "cs-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_209()
#line 1923 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_210()
#line 1937 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_211()
#line 1943 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_227()
#line 2005 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
			if (yyVals[0+yyTop] == null) { /* Semicolon*/
				lbag.AppendTo (op, savedLocation); 
			}
		}
		
		current_local_parameters = null;
	  }

void case_231()
#line 2042 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_233()
#line 2054 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), savedOperatorLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_258()
#line 2130 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_260()
#line 2149 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_261()
#line 2164 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_262()
#line 2170 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_263()
#line 2180 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_264()
#line 2197 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_265()
#line 2206 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (Tokenizer.LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_266()
#line 2235 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_272()
#line 2267 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_274()
#line 2277 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_275()
#line 2283 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_276()
#line 2289 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_277()
#line 2297 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_278()
#line 2306 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		d.Identifier = lt.Value;
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_279()
#line 2334 "cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_280()
#line 2348 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_281()
#line 2361 "cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_282()
#line 2369 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_283()
#line 2376 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_286()
#line 2395 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_291()
#line 2419 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_293()
#line 2429 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_294()
#line 2438 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_298()
#line 2459 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_299()
#line 2464 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_300()
#line 2469 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_301()
#line 2477 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_302()
#line 2489 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_303()
#line 2505 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_304()
#line 2517 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_305()
#line 2533 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_307()
#line 2541 "cs-parser.jay"
{
#if FULL_AST
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
#endif
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_308()
#line 2556 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_309()
#line 2561 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
		if (yyVals[-2+yyTop] != null) {
			lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_310()
#line 2578 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_311()
#line 2584 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-1+yyTop]));
		if (yyVals[0+yyTop] != null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		}
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		yyVal = pop_current_class ();
	  }

void case_313()
#line 2604 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
			yyVal = null;
		} else {
			savedLocation = GetLocation (yyVals[-1+yyTop]);
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_314()
#line 2615 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_319()
#line 2633 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_320()
#line 2641 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_321()
#line 2654 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_322()
#line 2662 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_324()
#line 2687 "cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_326()
#line 2706 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_328()
#line 2725 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_330()
#line 2736 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_332()
#line 2748 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_333()
#line 2757 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_335()
#line 2769 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	
		yyVal = yyVals[-1+yyTop];;
	  }

void case_336()
#line 2780 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_337()
#line 2788 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Push (new List<Location> ());
	  }

void case_338()
#line 2795 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_340()
#line 2812 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_341()
#line 2821 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_343()
#line 2832 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_344()
#line 2841 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_345()
#line 2846 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_346()
#line 2854 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_347()
#line 2860 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_348()
#line 2868 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_350()
#line 2878 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	  }

void case_351()
#line 2892 "cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		locationListStack.Push (new List<Location> ());
	  }

void case_352()
#line 2899 "cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_353()
#line 2909 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_354()
#line 2914 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_359()
#line 2948 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_361()
#line 2957 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_363()
#line 2966 "cs-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_366()
#line 2982 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_368()
#line 2998 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_371()
#line 3014 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_372()
#line 3020 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (types, GetLocation (yyVals[-1+yyTop]));
		yyVal = types;
	  }

void case_373()
#line 3030 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_410()
#line 3094 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_411()
#line 3098 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_422()
#line 3139 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_424()
#line 3151 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_425()
#line 3158 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_426()
#line 3165 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_427()
#line 3172 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_429()
#line 3182 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_431()
#line 3190 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_432()
#line 3198 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_435()
#line 3211 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_436()
#line 3221 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_439()
#line 3237 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_440()
#line 3243 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));
	  	yyVal = a;
	  }

void case_441()
#line 3249 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_442()
#line 3257 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_444()
#line 3266 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_445()
#line 3274 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else {
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  	}
	  }

void case_446()
#line 3283 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_451()
#line 3301 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_452()
#line 3307 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_453()
#line 3317 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_454()
#line 3332 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_455()
#line 3337 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_460()
#line 3358 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_461()
#line 3363 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_462()
#line 3368 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_463()
#line 3373 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_465()
#line 3385 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_468()
#line 3401 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_469()
#line 3407 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_470()
#line 3413 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_471()
#line 3421 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_472()
#line 3427 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_476()
#line 3455 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_477()
#line 3460 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_480()
#line 3482 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_481()
#line 3495 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_482()
#line 3507 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_483()
#line 3515 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_484()
#line 3522 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_485()
#line 3529 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_486()
#line 3534 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_488()
#line 3545 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_489()
#line 3553 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_494()
#line 3576 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_495()
#line 3582 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));

	  	yyVal = a;
	  }

void case_496()
#line 3593 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_497()
#line 3599 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_498()
#line 3605 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_499()
#line 3610 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_503()
#line 3625 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_504()
#line 3633 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_505()
#line 3638 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_510()
#line 3668 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_511()
#line 3675 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_512()
#line 3689 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_513()
#line 3695 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_515()
#line 3709 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_518()
#line 3720 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_519()
#line 3728 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_520()
#line 3734 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_521()
#line 3742 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_522()
#line 3750 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_523()
#line 3758 "cs-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};		
	  }

void case_524()
#line 3772 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_525()
#line 3782 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_526()
#line 3793 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_527()
#line 3801 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_528()
#line 3809 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_529()
#line 3817 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_531()
#line 3829 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_533()
#line 3842 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_537()
#line 3867 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  	savedOpenLocation = GetLocation (yyVals[-3+yyTop]);
	  	savedCloseLocation = GetLocation (yyVals[-2+yyTop]);
	  }

void case_538()
#line 3877 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_542()
#line 3897 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_543()
#line 3902 "cs-parser.jay"
{
		if (!async_block) {
			report.Error (1992, GetLocation (yyVals[-1+yyTop]),
				"The `await' operator can only be used when its containing method or lambda expression is marked with the `async' modifier");
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_552()
#line 3949 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_553()
#line 3954 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_554()
#line 3959 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
#line 3968 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_558()
#line 3977 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_562()
#line 3994 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 3999 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 4008 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 4013 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 4018 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 4023 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
#line 4032 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 4037 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
#line 4046 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
#line 4055 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 4064 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 4073 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 4082 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 4091 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_585()
#line 4102 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 4114 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 4119 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4124 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 4129 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 4134 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4139 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 4144 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 4149 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 4154 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 4159 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
#line 4167 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Clear ();
		yyVal = pars;
	  }

void case_598()
#line 4174 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = pars;
	  }

void case_599()
#line 4190 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_600()
#line 4196 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_601()
#line 4202 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_603()
#line 4210 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
		lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_607()
#line 4227 "cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_609()
#line 4238 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_610()
#line 4246 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_611()
#line 4252 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_612()
#line 4257 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_613()
#line 4263 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_615()
#line 4272 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_616()
#line 4277 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_618()
#line 4286 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_619()
#line 4291 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_626()
#line 4314 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_627()
#line 4319 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_628()
#line 4324 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_632()
#line 4353 "cs-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_633()
#line 4364 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_634()
#line 4378 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_635()
#line 4384 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_638()
#line 4403 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_641()
#line 4417 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_642()
#line 4436 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_643()
#line 4444 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_644()
#line 4449 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
#line 4454 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_646()
#line 4459 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_647()
#line 4464 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_648()
#line 4469 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4474 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4479 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4484 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4489 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4494 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4499 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4504 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4511 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4520 "cs-parser.jay"
{
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
		lbag.AppendToMember (current_type, GetLocation (yyVals[-1+yyTop]));
	 }

void case_659()
#line 4525 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_662()
#line 4542 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_663()
#line 4548 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_664()
#line 4567 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_665()
#line 4573 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_666()
#line 4583 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_667()
#line 4589 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (constraints, GetLocation (yyVals[-1+yyTop]));
		yyVal = constraints;
	  }

void case_668()
#line 4616 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_669()
#line 4623 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_673()
#line 4643 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_674()
#line 4653 "cs-parser.jay"
{
		yyVal = Variance.Covariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_675()
#line 4658 "cs-parser.jay"
{
		yyVal = Variance.Contravariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_676()
#line 4679 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_678()
#line 4691 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_679()
#line 4696 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_680()
#line 4705 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_681()
#line 4710 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_682()
#line 4714 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol '}', expected '{'");
		lexer.putback ('}');
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_690()
#line 4743 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		var lt =(Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		yyVal = null;
	}

void case_691()
#line 4752 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_724()
#line 4816 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_725()
#line 4821 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_726()
#line 4826 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_727()
#line 4834 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_728()
#line 4842 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_731()
#line 4855 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_732()
#line 4871 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_733()
#line 4901 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_734()
#line 4912 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_737()
#line 4927 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_739()
#line 4936 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_742()
#line 4952 "cs-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_743()
#line 4962 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_744()
#line 4969 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_745()
#line 4975 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_746()
#line 4982 "cs-parser.jay"
{
		if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = current_variable;;
		current_variable = null;
	  }

void case_748()
#line 4995 "cs-parser.jay"
{
		/* Redundant, but wont regress*/
		report.Error (1525, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		yyVal = yyVals[0+yyTop];
	  }

void case_750()
#line 5006 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_751()
#line 5011 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
			current_variable.Initializer = ErrorExpression.Create (650, lexer.Location,
					"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
			current_variable.Initializer = ErrorExpression.Create (0, lexer.Location,
					"Syntax error");
		}
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_752()
#line 5025 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_756()
#line 5043 "cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_759()
#line 5058 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
#line 5067 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_762()
#line 5083 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_767()
#line 5101 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_769()
#line 5114 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_770()
#line 5119 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_771()
#line 5127 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_773()
#line 5133 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_776()
#line 5151 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_777()
#line 5164 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_778()
#line 5172 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_781()
#line 5186 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_782()
#line 5195 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_783()
#line 5205 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_785()
#line 5219 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_786()
#line 5225 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_787()
#line 5235 "cs-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_789()
#line 5244 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_790()
#line 5251 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_791()
#line 5258 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_794()
#line 5277 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_795()
#line 5284 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_796()
#line 5294 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_802()
#line 5313 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_803()
#line 5321 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_804()
#line 5331 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_805()
#line 5336 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_806()
#line 5341 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_807()
#line 5351 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, current_block.StartLocation);
		yyVal = f;
	  }

void case_809()
#line 5368 "cs-parser.jay"
{
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = f;
	  }

void case_811()
#line 5378 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}

void case_812()
#line 5389 "cs-parser.jay"
{
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = f;
	  }

void case_814()
#line 5399 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}

void case_815()
#line 5411 "cs-parser.jay"
{
		For f =  (For) yyVals[-3+yyTop];
		f.Iterator = (Statement) yyVals[-2+yyTop];
		
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-1+yyTop]));
	  }

void case_816()
#line 5424 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_819()
#line 5437 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_820()
#line 5444 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_828()
#line 5468 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_829()
#line 5484 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_830()
#line 5497 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_831()
#line 5514 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_832()
#line 5523 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_833()
#line 5534 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = yyVals[-1+yyTop] as Tokenizer.LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
#line 5547 "cs-parser.jay"
{
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = f;
	  }

void case_841()
#line 5567 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
#line 5575 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_843()
#line 5583 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
#line 5589 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_845()
#line 5594 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 5602 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_847()
#line 5610 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_848()
#line 5618 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_849()
#line 5634 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_853()
#line 5660 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_854()
#line 5665 "cs-parser.jay"
{
		var loc = GetLocation (yyVals[-4+yyTop]);
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], loc, true), (Block) yyVals[0+yyTop], loc);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_855()
#line 5671 "cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_856()
#line 5679 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_857()
#line 5686 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_861()
#line 5710 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_863()
#line 5729 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_866()
#line 5757 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_868()
#line 5767 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_869()
#line 5775 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_870()
#line 5785 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_871()
#line 5795 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_872()
#line 5800 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_873()
#line 5813 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_874()
#line 5823 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_875()
#line 5828 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_876()
#line 5838 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_877()
#line 5846 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_879()
#line 5857 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_881()
#line 5869 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_882()
#line 5881 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_883()
#line 5893 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_884()
#line 5904 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_885()
#line 5911 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_886()
#line 5920 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_887()
#line 5930 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_888()
#line 5945 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_889()
#line 5955 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_891()
#line 5974 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);

		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_893()
#line 5990 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_894()
#line 6009 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_896()
#line 6025 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_898()
#line 6037 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_899()
#line 6044 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_900()
#line 6052 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_901()
#line 6059 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_905()
#line 6076 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_912()
#line 6096 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_914()
#line 6115 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_915()
#line 6125 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_916()
#line 6133 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_917()
#line 6141 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_918()
#line 6149 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), opt_intoStack.Pop ());
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_919()
#line 6187 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_920()
#line 6195 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_921()
#line 6203 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_922()
#line 6211 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), opt_intoStack.Pop ());
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_924()
#line 6257 "cs-parser.jay"
{
		opt_intoStack.Push (GetLocation (yyVals[-1+yyTop]));
		yyVal = yyVals[0+yyTop];
	  }

void case_926()
#line 6269 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_928()
#line 6280 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_929()
#line 6287 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_931()
#line 6296 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_932()
#line 6303 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_934()
#line 6315 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_935()
#line 6320 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_937()
#line 6332 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_938()
#line 6337 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_940()
#line 6347 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_941()
#line 6363 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_944()
#line 6390 "cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_945()
#line 6418 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_955()
#line 6461 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_956()
#line 6467 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_959()
#line 6482 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_960()
#line 6487 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_961()
#line 6495 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_962()
#line 6503 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_970()
#line 6541 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_971()
#line 6547 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_972()
#line 6556 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   19,   20,   17,   18,   18,   18,   22,   22,   23,   23,
    7,    7,    6,    6,   21,   21,    8,    8,   24,   24,
   24,   25,   25,   25,   25,   25,    9,    9,   10,   10,
   33,   31,   36,   32,   32,   34,   34,   34,   34,   35,
   35,   40,   37,   38,   39,   39,   41,   41,   41,   41,
   41,   42,   42,   46,   43,   45,   48,   48,   48,   49,
   49,   50,   50,   51,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   65,   67,   69,   70,   71,
   27,   27,   74,   52,   75,   75,   76,   76,   77,   79,
   73,   73,   78,   78,   84,   53,   88,   53,   53,   83,
   91,   83,   85,   85,   92,   92,   93,   94,   93,   89,
   89,   95,   95,   96,   97,   87,   87,   90,   90,   90,
  100,   54,  103,  104,   98,  105,  106,  107,   98,   98,
   98,   99,   99,  102,  102,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  111,  111,  114,  114,  114,
  117,  114,  115,  115,  118,  118,  119,  119,  119,  112,
  112,  112,  120,  120,  120,  113,  122,  124,  125,   55,
  127,  128,  129,   57,  123,  123,  123,  123,  123,  133,
  130,  134,  131,  132,  132,  132,  135,  136,  137,  139,
   28,   28,  138,  138,  140,  140,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  144,   58,  143,  143,  145,
  145,  148,  142,  142,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  150,  149,  151,  149,
  149,  149,   59,  154,  156,  152,  153,  153,  155,  155,
  160,  158,  161,  158,  158,  158,  162,   60,  164,   56,
  167,  168,   56,  163,  170,  163,  165,  165,  171,  171,
  172,  173,  172,  174,  169,  166,  166,  166,  166,  166,
  178,  175,  179,  176,  177,  177,   61,  181,  183,  184,
   29,  180,  180,  180,  182,  182,  182,  185,  185,  186,
  187,  186,  188,  189,  190,   30,  191,  191,   16,   16,
  192,  192,  195,  194,  194,  194,  196,  196,  198,   64,
  121,  101,  101,  126,  126,  199,  199,  199,  197,  197,
  200,  200,  201,  201,  203,  203,   82,   72,   72,   86,
   86,  116,  116,  146,  146,  204,  204,  204,  204,  204,
  208,  208,  209,  207,  207,  207,  207,  207,  207,  207,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  212,
  212,  212,  213,  213,  213,  233,  233,  234,  234,  235,
  235,  215,  215,  232,  232,  232,  232,  232,  232,  232,
  232,  217,  236,  236,  237,  237,  238,  238,  240,  240,
  240,  241,  241,  241,  241,  241,  242,  242,  159,  159,
  246,  246,  246,  246,  246,  248,  248,  247,  247,  249,
  249,  249,  249,  250,  218,  218,  218,  245,  245,  245,
  251,  251,  252,  252,  219,  220,  220,  221,  222,  223,
  223,  214,  214,  214,  214,  214,  257,  253,  224,  258,
  258,  259,  259,  260,  260,  261,  261,  261,  261,  254,
  254,  205,  205,  256,  256,  262,  262,  255,  255,   81,
   81,  263,  263,  264,  225,  265,  265,  265,  266,  266,
  266,  266,  266,  267,  193,  226,  227,  228,  229,  269,
  230,  270,  230,  268,  268,  272,  271,  216,  273,  273,
  273,  273,  273,  274,  274,  274,  274,  274,  274,  274,
  275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
  277,  277,  277,  278,  278,  278,  278,  278,  279,  279,
  279,  280,  280,  281,  281,  282,  282,  283,  283,  284,
  284,  285,  285,  286,  286,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  288,  288,  289,  289,  290,  290,
  290,  291,  291,  292,  292,  294,  293,  287,  287,  296,
  295,  297,  295,  298,  299,  295,  300,  301,  295,   44,
   44,  243,  243,  243,  243,  231,  231,  231,   80,  303,
  304,  305,  306,  307,   26,   63,   63,   62,   62,  108,
  108,  308,  308,  308,  308,  308,  308,  308,  308,  308,
  308,  308,  308,  308,  308,  308,   66,   66,   66,   68,
   68,  309,  309,  310,  310,  311,  311,  312,  312,  312,
  312,  202,  202,  313,  313,  315,  109,  316,  316,  317,
  157,  157,  314,  314,  318,  318,  319,  319,  319,  319,
  319,  323,  323,  324,  324,  324,  321,  321,  321,  321,
  321,  321,  321,  321,  321,  321,  321,  321,  321,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
  325,  325,  339,  339,  339,  339,  326,  340,  322,  341,
  341,  342,  342,  342,  342,  342,  342,  206,  206,  343,
   47,   47,  345,  320,  349,  320,  347,  347,  344,  344,
  344,  344,  346,  346,  353,  353,  352,  352,  354,  354,
  348,  348,  350,  350,  355,  355,  356,  351,  351,  351,
  327,  327,  327,  338,  338,  357,  358,  358,  328,  328,
  359,  359,  359,  362,  360,  360,  361,  361,  363,  363,
  363,  366,  364,  365,  365,  367,  367,  329,  329,  329,
  329,  368,  368,  369,  369,  369,  373,  370,  376,  372,
  372,  379,  375,  375,  378,  378,  374,  374,  382,  381,
  381,  377,  377,  380,  380,  384,  383,  383,  371,  371,
  385,  371,  371,  371,  330,  330,  330,  330,  330,  330,
  386,  387,  388,  388,  388,  389,  390,  391,  391,  392,
  392,  331,  331,  331,  331,  393,  393,  395,  395,  394,
  396,  394,  394,  332,  333,  397,  336,  334,  334,  399,
  400,  337,  402,  403,  335,  335,  335,  401,  401,  398,
  398,  302,  302,  302,  302,  404,  404,  406,  406,  408,
  407,  409,  407,  405,  405,  405,  413,  411,  414,  415,
  411,  410,  410,  416,  416,  417,  417,  417,  417,  417,
  422,  418,  423,  419,  424,  425,  426,  420,  428,  429,
  430,  420,  427,  427,  432,  421,  431,  435,  431,  434,
  437,  434,  433,  433,  433,  436,  436,  436,  412,  438,
  412,    3,    3,  439,    3,    3,  440,  440,  244,  244,
  239,  239,    5,  441,  441,  441,  441,  445,  441,  441,
  441,  441,  442,  442,  443,  446,  443,  444,  444,  447,
  447,  448,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    3,    5,    2,
    0,    0,   11,    1,    3,    1,    0,    1,    0,    1,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    1,    1,    2,
    0,    3,    0,    6,    3,    1,    1,    1,    1,    1,
    3,    0,    3,    1,    0,    3,    0,    1,    1,    3,
    3,    1,    1,    0,    4,    4,    0,    1,    1,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,
   16,    5,    0,    9,    0,    1,    1,    2,    3,    0,
    3,    1,    1,    1,    0,    8,    0,    9,    6,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    1,    1,    2,    3,    0,    4,    2,    1,    1,    1,
    0,    3,    0,    0,   10,    0,    0,    0,   12,    8,
    5,    1,    1,    0,    1,    1,    3,    3,    3,    5,
    3,    5,    1,    1,    1,    1,    3,    4,    6,    4,
    0,    7,    0,    1,    1,    2,    1,    1,    1,    4,
    6,    4,    1,    2,    2,    1,    0,    0,    0,   10,
    0,    0,    0,   13,    1,    2,    1,    2,    1,    0,
    5,    0,    5,    1,    1,    1,    0,    0,    0,    0,
   15,    5,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    5,    1,    1,    1,
    1,    0,    7,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    7,    0,    7,
    2,    2,    2,    0,    0,    9,    1,    1,    0,    1,
    0,    6,    0,    6,    2,    1,    0,    8,    0,    9,
    0,    0,   10,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    2,    0,    0,    0,
   12,    0,    2,    2,    0,    1,    2,    1,    3,    2,
    0,    5,    0,    0,    0,   13,    0,    1,    1,    3,
    1,    4,    2,    0,    3,    2,    1,    3,    0,    3,
    1,    1,    3,    1,    2,    3,    4,    4,    0,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    4,    4,    4,    3,    3,    4,    3,
    4,    4,    0,    1,    3,    4,    0,    1,    1,    3,
    2,    3,    1,    2,    3,    2,    1,    1,    0,    1,
    1,    3,    3,    2,    2,    1,    1,    1,    1,    2,
    2,    4,    3,    1,    4,    4,    3,    1,    3,    2,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    6,
    3,    7,    4,    3,    7,    3,    0,    2,    4,    1,
    2,    0,    1,    1,    3,    3,    1,    1,    1,    0,
    1,    1,    2,    2,    3,    1,    2,    0,    1,    2,
    4,    1,    3,    0,    5,    1,    1,    1,    2,    3,
    3,    4,    4,    1,    2,    4,    4,    4,    4,    0,
    4,    0,    5,    0,    1,    0,    4,    4,    1,    2,
    2,    4,    2,    1,    2,    2,    2,    2,    2,    2,
    1,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    3,    1,    3,    1,    5,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    2,
    1,    0,    1,    1,    1,    0,    2,    1,    1,    0,
    4,    0,    5,    0,    0,    7,    0,    0,    8,    1,
    1,    1,    1,    1,    1,    6,    4,    4,    1,    1,
    0,    0,    0,    0,   15,    0,    1,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    2,    3,    0,
    1,    1,    2,    4,    3,    1,    3,    1,    3,    1,
    1,    0,    1,    1,    1,    0,    4,    1,    1,    0,
    4,    1,    0,    1,    1,    2,    1,    1,    1,    2,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    1,
    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,
    1,    1,    0,    6,    0,    7,    1,    1,    0,    2,
    2,    1,    0,    1,    0,    1,    1,    2,    2,    4,
    0,    2,    0,    1,    1,    2,    4,    1,    5,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    5,    7,    4,    0,    8,    4,    0,    1,    1,    2,
    1,    0,    3,    1,    2,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    4,
    2,    0,    4,    2,    3,    1,    0,    1,    0,    5,
    1,    0,    1,    0,    1,    1,    1,    3,    4,    5,
    0,    9,    5,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    3,    4,    3,    3,    3,    4,    3,    0,
    1,    3,    4,    5,    3,    1,    2,    0,    1,    2,
    0,    7,    3,    2,    2,    0,    3,    5,    4,    0,
    0,   10,    0,    0,    9,    5,    4,    2,    1,    0,
    2,    2,    2,    2,    2,    4,    5,    4,    5,    0,
    5,    0,    6,    3,    2,    1,    0,    3,    0,    0,
    6,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    0,    5,    0,    3,    0,    0,    0,   12,    0,    0,
    0,   13,    0,    2,    0,    3,    1,    0,    4,    1,
    0,    4,    1,    2,    2,    1,    2,    2,    0,    0,
    4,    2,    3,    0,    4,    2,    2,    3,    0,    1,
    1,    1,    2,    2,    2,    4,    3,    0,    7,    4,
    4,    3,    1,    3,    0,    0,    4,    0,    1,    1,
    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  942,    0,    0,  946,    0,
    0,   15,   17,  376,  382,  389,  377,  379,    0,  378,
    0,  385,  387,  374,    0,  381,  383,  375,  386,  388,
  384,  339,  963,    0,  380,  953,    0,   10,    1,    0,
    0,    0,   12,    0,  778,    0,    0,    0,    0,    0,
    0,    0,    0,  417,    0,    0,    0,    0,    0,    0,
    0,  415,    0,    0,    0,  475,    0,  416,    0,  514,
    0,  866,    0,    0,    0,  625,    0,    0,    0,    0,
    0,    0,    0,  676,    0,  727,    0,    0,    0,    0,
    0,    0,    0,    0,  414,    0,  614,    0,  777,    0,
  710,    0,    0,    0,    0,  391,  392,    0,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  412,  413,  621,  544,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  622,  620,  623,  624,  694,  696,    0,  692,  695,  711,
  713,  714,  715,  716,  717,  718,  719,  720,  721,  722,
  712,    0,    0,    0,  779,  780,  798,  799,  800,  801,
  835,  836,  837,  838,  839,  840,    0,    0,    0,   20,
    0,    0,  329,    0,  331,  950,   16,  943,    0,    0,
  240,  239,  236,  241,  242,  235,  254,  253,  246,  247,
  243,  245,  244,  248,  237,  238,  249,  250,  256,  255,
  251,  252,    0,    0,  966,    0,  955,    0,  954,    3,
   51,    0,    0,    0,   40,   37,   39,   42,   43,   44,
   45,   46,   49,   13,    0,    0,    0,  841,  418,  419,
  864,    0,    0,    0,    0,    0,    0,  393,    0,  842,
    0,  536,  530,  535,  726,  776,  697,  724,  723,  725,
  698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
  708,  709,    0,    0,    0,  807,    0,    0,    0,  742,
  741,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  851,    0,  390,    0,    0,    0,    0,    0,    0,
  865,    0,    0,    0,  740,  736,    0,    0,    0,    0,
    0,    0,    0,  358,    0,    0,    0,    0,    0,    0,
    0,    0,  617,    0,  543,    0,    0,  541,  545,  546,
  540,  550,  549,  547,  548,  610,  525,    0,  411,  410,
    0,    0,    0,    0,    0,  728,    0,  328,    0,  734,
  735,    0,  478,  479,    0,    0,    0,  732,  733,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  945,  693,  743,  731,    0,  774,  775,
  896,  913,    0,    0,    0,  925,  884,  882,  906,    0,
    0,  904,  907,  908,  909,  910,  885,  883,    0,    0,
    0,  333,    0,   18,    0,    0,    0,  962,    0,  340,
    0,    0,    0,  964,    0,    0,   38,  647,  653,  645,
    0,  642,  652,  646,  644,  643,  650,  648,  649,  655,
  651,  654,  656,    0,    0,  640,   41,   50,  477,    0,
  473,  474,    0,    0,  471,    0,  745,    0,    0,    0,
  805,    0,  773,  771,  772,    0,    0,    0,  629,    0,
  845,  843,  630,    0,    0,  499,    0,    0,    0,  490,
    0,  494,  504,  506,    0,  486,    0,    0,    0,    0,
    0,  481,    0,  484,    0,  488,  360,  846,    0,    0,
  847,  855,    0,    0,    0,  856,    0,    0,  867,    0,
    0,  739,    0,  370,  366,  367,    0,    0,  365,  368,
  369,    0,    0,    0,  551,    0,    0,  532,    0,  612,
  691,    0,    0,    0,  685,  687,  688,  689,  422,  423,
    0,  336,  337,    0,  178,  177,  179,    0,    0,    0,
    0,  362,    0,  597,    0,    0,  849,    0,    0,  427,
    0,  430,    0,  428,    0,  467,    0,    0,    0,    0,
    0,  456,  459,    0,    0,  451,  458,  457,    0,  586,
  587,  588,  589,  590,  591,  592,  593,  594,  596,  595,
  552,  554,  553,  559,  560,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  583,    0,    0,  503,    0,    0,    0,    0,    0,    0,
    0,  897,  899,  895,    0,  905,    0,    0,  330,  960,
  961,  354,    0,    0,    0,  351,    0,    0,  175,    0,
    0,  970,  956,  958,   59,   57,   58,    0,    0,   52,
    0,    0,   60,   62,   26,   24,    0,    0,    0,  637,
    0,  641,  426,    0,  476,    0,  527,    0,  538,  165,
  186,    0,    0,  155,    0,    0,    0,  166,  531,    0,
  870,    0,  827,  808,    0,  818,    0,  829,    0,  844,
  783,    0,  869,    0,    0,  489,    0,  505,  507,    0,
    0,  443,    0,    0,  439,    0,    0,  468,    0,  509,
  483,    0,  140,  510,  138,  139,  512,    0,  526,  786,
    0,  860,    0,  853,    0,  857,  518,    0,    0,    0,
  355,    0,  516,    0,    0,  528,  877,    0,  873,  803,
    0,  888,    0,  886,    0,    0,  627,  628,    0,    0,
    0,  690,  678,  679,  677,  686,  605,  611,  604,    0,
    0,  335,  600,    0,    0,    0,  542,  848,  729,  431,
  425,  429,  424,  529,  466,  465,  464,  461,  460,    0,
  455,  420,  421,  432,    0,    0,  752,    0,    0,  609,
  608,  914,  890,    0,  915,    0,  911,    0,  926,    0,
    0,    0,    0,  894,   19,  332,  675,  674,    0,  673,
    0,  350,  972,  176,  967,    0,    0,   53,    0,    0,
    0,    0,    0,    0,  357,    0,  631,    0,    0,   79,
   78,    0,  472,    0,    0,    0,    0,    0,  537,    0,
    0,    0,    0,    0,  819,  811,  809,    0,  830,    0,
    0,  868,  496,  495,  446,    0,    0,  951,  952,  435,
  441,    0,  444,    0,  470,    0,    0,    0,    0,    0,
  784,  863,    0,  854,    0,  524,  519,    0,    0,  515,
    0,  876,    0,  802,  889,  887,    0,  533,    0,  613,
  607,  338,  599,  598,  615,  463,    0,  453,  452,  585,
  140,    0,  768,  750,    0,    0,    0,  757,    0,  892,
    0,  919,    0,  934,  935,  928,  898,  900,  940,  353,
  352,  971,    0,    0,   61,   55,    0,   63,   25,   22,
    0,    0,  308,    0,  212,    0,  102,    0,   76,  762,
  113,  114,    0,    0,    0,  765,  184,  185,    0,    0,
    0,    0,  158,  167,  159,  161,  806,    0,    0,    0,
    0,    0,  828,    0,    0,  445,  447,  448,  442,  436,
  440,    0,  501,    0,  469,  480,  434,  513,  511,    0,
  859,    0,    0,    0,  520,    0,  879,    0,    0,  626,
  618,    0,  462,    0,    0,  748,  747,  744,  758,  891,
    0,    0,    0,  912,    0,    0,    0,  959,    0,    0,
    0,   68,   69,   72,   73,    0,  323,  314,  313,    0,
  632,  208,   97,    0,  746,  766,  170,    0,  182,    0,
    0,    0,  804,  881,    0,    0,    0,  823,  810,    0,
  831,  782,  485,  482,  791,    0,  797,    0,    0,  789,
    0,  794,  861,  523,  522,  878,  874,    0,  616,    0,
    0,  893,  916,    0,    0,    0,  930,    0,  941,    0,
   74,   66,    0,    0,    0,  309,    0,    0,    0,    0,
    0,  171,    0,  162,  160,  871,  820,  814,  812,    0,
    0,  785,  790,    0,  795,    0,    0,  619,    0,  760,
    0,  920,  937,  938,  931,  901,   54,    0,   70,   71,
    0,    0,    0,    0,    0,    0,    0,  767,  169,    0,
  181,    0,    0,  832,  796,    0,  680,  682,  862,  875,
  769,    0,    0,    0,   75,    0,    0,  324,    0,  310,
    0,  318,  373,    0,  371,    0,  633,    0,  662,  209,
   98,  172,  872,  816,  813,    0,    0,  825,    0,  917,
    0,  932,    0,    0,    0,    0,    0,  659,    0,    0,
    0,  663,    0,    0,    0,    0,    0,  921,   28,   23,
  325,    0,    0,  319,  372,  665,    0,    0,    0,   99,
  815,  681,    0,    0,    0,    0,  311,  670,    0,  671,
  668,    0,  666,   95,    0,    0,   93,    0,    0,   82,
   84,   85,   86,   87,   88,   89,   90,   91,   92,   94,
  141,    0,    0,  225,  217,  218,  219,  220,  221,  222,
  223,  224,    0,    0,  215,    0,    0,  918,    0,  326,
  322,    0,    0,    0,  307,  634,   83,    0,  268,  263,
  267,    0,  210,  216,    0,  924,  922,  669,  667,    0,
    0,    0,    0,    0,    0,    0,  277,    0,    0,  226,
    0,    0,  234,    0,  153,  142,  152,    0,  100,    0,
    0,  262,    0,    0,  261,    0,  146,    0,    0,  344,
    0,  342,    0,    0,  187,    0,    0,    0,    0,    0,
  635,  211,    0,  103,    0,  341,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,  151,  143,    0,
    0,  191,    0,  345,    0,  229,  228,  227,    0,  101,
    0,  281,    0,  259,  119,    0,  257,    0,    0,    0,
  121,    0,  346,    0,    0,  188,    0,    0,    0,  343,
  232,  112,  110,    0,    0,  285,    0,    0,    0,    0,
    0,  147,    0,  265,    0,    0,    0,    0,  125,    0,
    0,    0,    0,  347,  348,    0,    0,    0,    0,    0,
  107,  300,    0,  282,    0,    0,  294,    0,    0,    0,
  289,    0,  137,    0,    0,    0,    0,  132,    0,    0,
  278,    0,  122,    0,  116,  126,  144,  150,  199,    0,
  189,    0,    0,    0,    0,  111,    0,  104,  108,    0,
    0,    0,  296,    0,  297,  286,    0,    0,  280,  290,
  260,    0,    0,  118,  133,  258,    0,  276,    0,  266,
  270,  128,    0,    0,    0,  196,  198,  192,  233,  109,
  301,  303,  283,    0,    0,  295,  292,  136,  134,  148,
  275,    0,    0,    0,  145,  200,  202,  190,    0,    0,
    0,  294,    0,  271,  273,  129,    0,    0,  193,  305,
  306,  302,  304,  293,  149,    0,    0,  206,  205,  204,
  201,  203,    0,    0,    0,  194,  272,  274,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  232,  692,  654,
   12,   13,   52,   22,   23,  321,  235,  677,  843, 1036,
 1157, 1500,  840,  236,  237,  238,  239,  240,  241,  242,
  243,  670,  445,  671,  672,  944,  673,  674,  948,  841,
 1031, 1032, 1033,  266,  593, 1128,  110,  852, 1228, 1229,
 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
 1240,  464,  681, 1312,  958, 1135, 1099, 1167, 1194, 1256,
 1323, 1163, 1374, 1351, 1399, 1400, 1401,  960, 1397,  961,
  736, 1289, 1362, 1336, 1387,  516, 1380, 1356, 1416,  923,
 1385, 1388, 1389, 1484, 1417, 1418, 1414, 1241, 1296, 1268,
 1313,  693, 1364, 1463, 1333, 1420, 1493,  465,  267,  694,
  695,  696,  697,  698,  657,  570, 1140,  658,  659,  858,
 1315, 1341, 1431, 1392, 1465, 1316, 1367, 1489, 1513, 1432,
 1433, 1511, 1497, 1498,  956, 1098, 1193, 1253, 1298, 1254,
 1255, 1290, 1348, 1319, 1291,  324,  223, 1396, 1293, 1381,
 1378, 1242, 1270, 1309, 1460, 1422, 1149, 1461,  594, 1506,
 1507, 1308, 1377, 1353, 1409, 1404, 1375, 1441, 1446, 1407,
 1410, 1411, 1492, 1447, 1405, 1406, 1502, 1490, 1491,  953,
 1040, 1160, 1133, 1186, 1161, 1162, 1202, 1095, 1184, 1215,
  535,  193,  112,  350,  195,  564,  440,  224, 1328,  655,
  656,  829,  845,  325,  407,  534,  303, 1164, 1165,   45,
  114,  304,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
  134,  135,  136,  252,  804,  996,  512,  723,  880,  724,
  725,  989,  137,  198,  729,  595,  596,  597,  598,  798,
  474,  475,  297,  994,  731,  408,  299,  499,  500,  501,
  502,  505,  738,  310,  754,  755,  897,  263,  480,  769,
  264,  479,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,  151,  812,  152,  573,  574,
  575,  778,  779,  780,  153,  561,  771,  351, 1012,  549,
 1078,  154,  494,  954, 1097, 1191, 1294,  466, 1168, 1169,
 1222, 1223,  830,  553,  336,  775, 1179,  554,  555,  268,
  269,  270,  157,  158,  159,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  171,  283,  579,
  172,  173,  317,  809,  633,  926, 1018,  855,  688,  964,
  924,  927, 1056,  928,  965,  966,  284,  174,  175,  176,
 1068, 1000, 1069, 1070, 1071, 1114, 1072,  177,  178,  179,
  180,  704,  487,  705, 1059,  982, 1060, 1175, 1143, 1176,
  706,  981,  707, 1178, 1110,  181,  182,  183,  184,  185,
  186,  305,  525,  526, 1002, 1116,  313,  980,  864, 1142,
 1009,  903, 1117,  187,  418,  188,  419,  929, 1021,  420,
  645,  824,  821,  822, 1026,  421,  422,  423,  424,  425,
  426,  933,  635,  931, 1121, 1197, 1258, 1023, 1153, 1214,
  819,  641,  820, 1086, 1025, 1087, 1154, 1027,   17,   19,
   46,   47,  227,  660,  837,  441,  661,  662,
  };
  protected static readonly short [] yySindex = {         -186,
    0, -219, -146,   10,   77, 4746,    0,   13,    0,    0,
   77,   10,    0,    0, -114,    0, 6722,   77,    0, -208,
 -233,    0,    0,    0,    0,    0,    0,    0,  -91,    0,
   71,    0,    0,    0, 1653,    0,    0,    0,    0,    0,
    0,    0,    0,  391,    0,    0,  664,    0,    0,   13,
   75,   77,    0,  162,    0,  308,  236,  330,11679,  446,
 -246,  176, 6879,    0, -246, -246, -246, -163, -246, -246,
  564,    0,10782, -246, -246,    0,10782,    0,  465,    0,
  330,    0, -246,  400, -246,    0,12152,12152,  471, -246,
 -246, -215,11462,    0,10782,    0,11462,11462,11462,11462,
11462,11462,11462,11462,    0,  276,    0, 8428,    0,  149,
    0,  443,  387, 1034,  338,    0,    0,  490,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1360,  788,
  148,  524,  527,  621,  507,  516,  593,  612,  415,  610,
    0,    0,    0,    0,    0,    0, 3318,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  223,  665, -242,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -192, -175,   75,    0,
  361,  234,    0,  630,    0,    0,    0,    0, 8428, 8428,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  689,  652,    0,  682,    0, -210,    0,    0,
    0,   75,12778,  826,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  859,  687,10918,    0,    0,    0,
    0,10782, -246, -246,  797,  194, 1034,    0,  223,    0,
 8428,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -152,  175,11679,    0, 8428,10782,  713,    0,
    0,  757,10782,10782, 9039,  639, -204,  773, 8585,11462,
  276,    0,  772,    0,  780, 8428,10782,  783,  562, -246,
    0,10782,  465,10238,    0,    0,  400,10782,  400,  411,
  470,  871,  223,    0,  665,  338,  884,  223,10782,10782,
10782,  176,    0,  862,    0, 7036,  -54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4201,    0,    0,
12108,  411,  841,  843,10782,    0,  801,    0,   48,    0,
    0,  294,    0,    0,  813, 8411, 9966,    0,    0,11462,
10782,10782,10782,10782,10782,10782,10782,10782,10782,10782,
10782,11462,11462,11462, 8428, 8428,11462,11462,11462,11462,
11462,11462,11462,11462,11462,11462,11462,11462,11462,11462,
11462,11462,10782,    0,    0,    0,    0,  665,    0,    0,
    0,    0,12152,12152,  223,    0,    0,    0,    0,   54,
  645,    0,    0,    0,    0,    0,    0,    0,   75,  826,
  820,    0,  834,    0,  801,  689,  689,    0, -121,    0,
  602,  689,  867,    0, -184,12778,    0,    0,    0,    0,
 -203,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  200,12808,    0,    0,    0,    0,  801,
    0,    0,  879,  673,    0,  889,    0,  894,   38,  465,
    0, -246,    0,    0,    0,  223,10238, -212,    0,  880,
    0,    0,    0, -103,  -61,    0,  419,    0,  901,    0,
  899,    0,    0,    0,  699,    0, 8095,  720,10782,  773,
 9966,    0, 7507,    0,  400,    0,    0,    0,  904,   87,
    0,    0,  330,  465,  193,    0, 4042,  906,    0,  110,
  223,    0,  118,    0,    0,    0,10782,  986,    0,    0,
    0,10782,  988,  915,    0,  922,  927,    0,12108,    0,
    0, -197,   59, 7036,    0,    0,    0,    0,    0,    0,
  465,    0,    0, -235,    0,    0,    0,  400,  411,  223,
 8742,    0,  926,    0,  931,11462,    0,  928, 7036,    0,
  367,    0,  410,    0,  801,    0,  -71,10782,10782,  934,
 1051,    0,    0,  -31,  936,    0,    0,    0,  788,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  788,  788,  148,  148,  524,
  524,  524,  524,  527,  527,  621,  507,  516,  593,  612,
    0,  945, -202,    0, 8568, 1015,  223, 1017,  223,  940,
10782,    0,    0,    0,  966,    0,  292,  801,    0,    0,
    0,    0,  591,   75,  -64,    0, 8742,  602,    0,  951,
  952,    0,    0,    0,    0,    0,    0,  411,  954,    0,
  953,  957,    0,    0,    0,    0,  959, 8899,  916,    0,
  355,    0,    0,  638,    0,10918,    0,  955,    0,    0,
    0,  567,  961,    0,  964,  965,  967,    0,    0,10782,
    0,  223,    0,    0,  408,    0,  970,    0, -144,    0,
    0, 6879,    0, 6879, 8254,    0, 9039,    0,    0,10374,
  301,    0,  104,  -83,    0,  911,  912,    0,   26,    0,
    0,  976,    0,    0,    0,    0,    0,  979,    0,    0,
  987,    0, 7524,    0,  465,    0,    0,  400,  514,  937,
    0,  228,    0,  983,  989,    0,    0, 6879,    0,    0,
 6879,    0,10782,    0,10782, 8428,    0,    0,  465,  984,
  465,    0,    0,    0,    0,    0,    0,    0,    0, 8568,
 8428,    0,    0,  223,12108, 1020,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 9830,
    0,    0,    0,    0,10102, 8568,    0, 7664,  992,    0,
    0,    0,    0, 1073,    0, 1077,    0,  847,    0,  998,
 8568, 8568,  223,    0,    0,    0,    0,    0,  956,    0,
 -121,    0,    0,    0,    0,  602,  602,    0,  820, 1005,
 1006,  963, 1012,  916,    0, 1007,    0, 1127, 1128,    0,
    0,10782,    0,10510, 1014,  567, 8742, 8428,    0,  347,
 1134, 1135,  121, 1022,    0,    0,    0,10782,    0,10782,
 1113,    0,    0,    0,    0,  155,10646,    0,    0,    0,
    0, 7800,    0, 1140,    0,  665,10782, 1031, 8254, 1033,
    0,    0,  223,    0,  232,    0,    0,  801,  937,    0,
  223,    0, -160,    0,    0,    0, 1032,    0, 1063,    0,
    0,    0,    0,    0,    0,    0,  705,    0,    0,    0,
    0, 8585,    0,    0,  223, -231,  992,    0, 8568,    0,
 8568,    0, 8568,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1041,  820,    0,    0,11054,    0,    0,    0,
 1039, 7681,    0,  916,    0,  916,    0,  916,    0,    0,
    0,    0,  223, 1036, 1014,    0,    0,    0, -193, -191,
 1044, 1046,    0,    0,    0,    0,    0, 1045, 8254,  992,
 -202,10782,    0, 1043, 6879,    0,    0,    0,    0,    0,
    0, 1052,    0,  773,    0,    0,    0,    0,    0, -179,
    0, 1056,  801,  937,    0,  937,    0,  992, 1057,    0,
    0,  465,    0, 1000, 1053,    0,    0,    0,    0,    0,
 8568, 1085, 8568,    0,10782, 1084,  318,    0,  957,  329,
  734,    0,    0,    0,    0,   10,    0,    0,    0, 1071,
    0,    0,    0, 1059,    0,    0,    0,  340,    0, 1064,
 1168, 1193,    0,    0,  992, 1075,  992,    0,    0,  560,
    0,    0,    0,    0,    0,10782,    0, 1083, -217,    0,
 -217,    0,    0,    0,    0,    0,    0,  465,    0,10782,
 7959,    0,    0, 1108,  887, 1082,    0, 8568,    0, 1089,
    0,    0,11054,   77,   38,    0, 1087, 1087, 1087,10510,
 1090,    0,10782,    0,    0,    0,    0,    0,    0, 6879,
 1091,    0,    0, 7036,    0,  686, 6879,    0, 1094,    0,
 8568,    0,    0,    0,    0,    0,    0,10782,    0,    0,
   75, 1093,   75, 8428, 1131, 1131, 1131,    0,    0,10782,
    0, 6879, 8725,    0,    0, 7036,    0,    0,    0,    0,
    0, 1123, 8568,10782,    0,   75, 1105,    0, 1061,    0,
 1100,    0,    0,  -65,    0, 1062,    0, 1131,    0,    0,
    0,    0,    0,    0,    0, 1109,  970,    0, 7036,    0,
 1138,    0, 1106, 1131,    0, 1115,   75,    0, 8428, -149,
 1124,    0, 1129, 1130, 6879, 1126, 8568,    0,    0,    0,
    0, 1114, 1106,    0,    0,    0,11758,   76,   75,    0,
    0,    0, 1148, 8568, 1141,10782,    0,    0, 1136,    0,
    0, 1132,    0,    0,12808,  877,    0, 1137,   76,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  558,12808,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1143,   75,    0,   76,  223,    0, 1148,    0,
    0, 1149,11758,11924,    0,    0,    0,  119,    0,    0,
    0,11956,    0,    0, 1152,    0,    0,    0,    0, 8428,
 8428,  125, 8585,  320,  400, 1186,    0,  411, 1238,    0,
 1220,    0,    0, 1106,    0,    0,    0, 1106,    0, 1110,
 1112,    0, 8428, -176,    0, 8428,    0, 1116, 1155,    0,
  411,    0,  -63, 4356,    0, 1162, 1118,  -27,  238, 1653,
    0,    0, 1106,    0,  411,    0, 1165, 1125, 1170, 1166,
    0, 1175, 1112, 1180,   38, 1171, 1181,    0,    0, 1185,
 1194,    0,  801,    0,  833,    0,    0,    0, 1187,    0,
 -128,    0, 1183,    0,    0, 1197,    0, 1196, 1190, 1198,
    0, 1195,    0,   38,   38,    0,   38, 1199, 1200,    0,
    0,    0,    0, 1201,   83,    0, 1203,   38, 1322, 1205,
   38,    0,  119,    0, 8254, 1163, 1204, 1195,    0, 1210,
 1211,   92, 1214,    0,    0,   38,10510, 1169, 1212, 1201,
    0,    0,12808,    0,   75,   75,    0, 1172, 1213, 1203,
    0, 1219,    0,10782, 1177, 1217, 1205,    0, 1229,   38,
    0, -142,    0, 1237,    0,    0,    0,    0,    0,12808,
    0,   92,   92, 1252, 1248,    0, -128,    0,    0, -153,
 1253,12808,    0,12808,    0,    0, 8254, 1241,    0,    0,
    0, 1254, 1197,    0,    0,    0, 1251,    0,  272,    0,
    0,    0, 1131,  886, 1258,    0,    0,    0,    0,    0,
    0,    0,    0, 1312, 1366,    0,    0,    0,    0,    0,
    0, 1259, 1260, 8254,    0,    0,    0,    0,   92,  546,
  546,    0, 1131,    0,    0,    0, -187, -187,    0,    0,
    0,    0,    0,    0,    0, 9966, 9966,    0,    0,    0,
    0,    0, 1264, 1261, 1262,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1802,
    0,    0, 7193, 1802,    0,    0,    0, 1635,    0,    0,
 3004, 2835,    0,    0,    0,    0,    0, 3004,    0,    0,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1636,    0,    0, 1636,    0,    0, 1635,
 1191, 2878,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1270,    0,    0,    0,    0,    0,    0,    0,    0,
12202,    0, 1263,    0,    0,    0, 1263,    0,    0,    0,
    0,    0,    0,  199,    0,    0,    0,    0,    0,    0,
    0,    0,  171,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4424,    0,    0,    0,    0,
    0,    0,  331, 4583, 3794,    0,    0, 4359,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4739, 4807,
 5151, 5355, 5695, 5899, 6035, 6171, 6307, 6443, 4517, 3685,
    0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  235,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  909,  909, 3047,    0,
  510,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1636,  131,    0,    0,    0,    0,    0,    0,
    0, 3110,  306, 3153,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1273,    0,    0,    0,    0,    0,
 3405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2341,    0, 2705,  654,
 2471,    0,    0,    0, 2601, 2471,    0,    0,    0,    0,
    0, 1270,    0,    0,    0,  129,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1266, 1330,    0,    0, 1263,    0, 3405,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   -1,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1476,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,    0,    0,    0,    0,    0,    0,    0, 3196, 3239,
    0,    0,    0,    0, 2195, 1636, 1636,    0, -200,    0,
 7976, 1636, 1642,    0,    0,  157,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  403,11611,    0,    0,    0,    0, 3405,
    0,    0,    0,    0,    0,    0,    0,    0,12000,    0,
    0,    0,    0,    0,    0,    0,  726,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1021, 1145,    0,    0,
 1276,    0,    0,    0,    0,    0,  140,    0,    0, 3882,
 1274,    0,    0,    0,  483,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1902,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1266,    0,
    0, 6562,    0,  141,    0,    0,    0,    0,    0,    0,
 8882,    0,    0,    0,    0,    0,    0,   50,  521,    0,
    0,    0, 1275,    0,    0,    0,    0,    0,    0,    0,
 3405,    0, 3405,    0, 4041,    0,    0,    0,    0,  -21,
    0,    0,    0,    0,   12,    0,    0,    0, 4911,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4979, 5083, 5219, 5287, 5423,
 5491, 5559, 5627, 5763, 5831, 5967, 6103, 6239, 6375, 6499,
    0,    0,  584,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  284,    0,    0, 2195,    0,    0,
    0,    0, 1227, 9230,    0,    0,    0,12234,    0,    0,
  748,    0,    0,    0,    0,    0,    0,  671,  651,    0,
    0, 1279,    0,    0,    0,    0, 1283,    0,    0,    0,
    0,    0,    0,11190,    0,    0,    0,  756,    0,    0,
    0,12278,    0,    0,  776,  814,  815,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  731,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1285,    0,    0,    0,
 3471,    0,    0,  150,    0,  163, 3564,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1286,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  237,  592,    0,
    0,    0,    0,    0, 1287,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8882,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  191,    0,    0,    0,   14,    0,
    0,    0,    0,    0,    0,    0,    0,  633,    0,  384,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -200,    0,    0,    0,    0,12278, 8271,    0, 1281,    0,
  743,    0,    0,    0,    0, 1288,    0, 1239, 1240,    0,
    0,    0,    0,    0, 1284,12310,    0,    0,    0,12076,
    0,    0,    0,  777,    0,    0,    0,    0,    0,    0,
 2069,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3723,    0, 4200, 1293,    0,
    0,    0, 1290,    0,    0,    0,    0,  425,    0,    0,
    0,    0,  777,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  620,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  818,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1289,    0,    0,    0,    0,    0,
  839,  842,    0,    0,    0,    0,    0,    0,    0, 1292,
  685,  749,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3882,    0,    0,    0,    0,    0, 1298,
    0,    0,  425,    0,    0,  891,    0, 1292,    0,    0,
    0, 8882,    0,  642,  656,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,    0, 1279, 9076,
    0,    0,    0,    0,    0,12352,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  696,    0,  723,
    0,    0,    0,    0,  906,    0,  763,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1300,    0,
 7350,    0,    0,    0,    0,    0,    0, 8882,    0,    0,
    0,    0,    0,    0,  808,  854,    0,    0,    0,    0,
    0,    0,    0,12428,12000,    0,  495,  495,  495,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
12471,    0,   31,    0, 1303, 1303, 1303,    0,    0,    0,
    0,    0, 1299,    0,    0, -171,    0,    0,    0,    0,
    0,    0,    0,    0,    0,12514,    0,    0,    0,    0,
 1304,    0,    0,  497,    0,    0,    0,  553,    0,    0,
    0,    0,    0,    0,    0,    0, 1301,    0, 1307,    0,
    0,    0, 2921, 1313,  508,    0,  225,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1652,    0,    0,    0,    0, 9335, 9533,    0,
    0,    0,  935,    0,    0,    0,    0,    0,    0,    0,
    0,  439,    0,    0,11782, 9627,    0,    0, 9434,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11850,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9713,    0, 9335,    0,    0,  935,    0,
    0,    0,    0,  403,    0,    0,    0,    0,    0,    0,
    0,  403,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  817,  412,    0, 9755,    0,    0,
    0, 1040,    0, 1652,    0,    0,    0, 1652,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -88,    0, 1321,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1652,    0,  600,    0,  655,    0,    0,    0,
    0,    0,    0,    0,12000,  849,    0,    0,    0,    0,
    0,    0, 1317,    0,   84,    0,    0,    0,    0,    0,
    0,    0,  852,    0,    0,    0,    0,    0,    0,    0,
    0, 1315,    0,12000,12000,    0,12032,    0,    0,    0,
    0,    0,    0, 1316,12738,    0, 1318,12000,11326, 1319,
12000,    0,    0,    0,    0,    0,    0, 1320,    0,    0,
    0,12708,    0,    0,    0,12000,    0,    0,    0, 1331,
    0,    0,  298,    0,12632,12670,    0,    0,    0, 1334,
    0,    0,    0,    0,    0,    0, 1335,    0,    0,12000,
    0,  570,    0,  853,    0,    0,    0,    0,    0,  907,
    0,12556,12594,    0,    0,    0,    0,    0,    0,    0,
    0, 1402,    0, 1455,    0,    0,    0,  858,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  580,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,12708, 9070,
11498,    0,  580,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1274, 1274,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1671,    0,    0,    0,   -3,  -10, -177,  -46,  -40,
    0, 1711, 1728,  563,    0,    5,    0,    0,    0,    0,
    0,-1062, -696, -216, -455,    0,    0,    0,    0,    0,
 -221,    0,    0,    0,  790,    0,  896,    0,    0,    0,
    0,  643,  649,  -17, -230,    0,    3,    0,  488,    0,
  518, -655, -543, -536, -535, -516, -513, -464, -458,    0,
    0,-1125,    0,    1,    0,  192,    0,-1098,    0,    0,
    0,  -41,  312,    0,    0,    0,  345,-1072,    0, -274,
 -288, 1074,    0,    0,    0, -889,  302,    0,    0, -504,
    0,    0,  363,    0,    0,  337,    0,    0,  373,    0,
 -494, -775,    0,    0,    0,    0,    0,  468,  -13,    0,
    0,  898,  917,  919, 1069, -528,    0,    0, -321,  920,
  474,    0, -888,    0,    0,    0,    0,    0,    0,    0,
    0,  274,    0,    0,    0,    0,    0,    0,    0,    0,
  526,    0,    0,    0,    0, -269,  462,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  542,    0, -505,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  297,    0,
    0,  380,    0,    0,  386,  390,  303,    0,    0,    0,
    0,    0,    0,    0,    0,  609,    0,    0,    0,    0,
  -39,    0,  136,  -68,    0,    0,  453,    0,  511,    0,
  968,    0, 1278, -296, -275,  -58,  882,    0,  614,    0,
  -38,  107,    0,    0,  668,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -263,    0,   18,    0,    0, -750,    0,    0,    0,
  924,    0, -300, -130, 1088, 1010,    0, 1002,    0, 1222,
 1447, 1133,    0,    0,  822, 1746,    0,    0,    0,    0,
 1101,    0,    0,    0,    0,    0, -626, 1489,    0,    0,
    0,    0,    0, 1215,  389,  903,  779,  902, 1436, 1437,
 1438, 1440, 1435,    0, 1439,    0, -374,    0,    0, 1060,
 1341, -731,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -295,    0,    0,    0,    0, -447,    0,  674,
    0,  590,    0,  677,    0,    0,    0,  781, -530,  -15,
 -305,   -2,    0, 1734,    0,   41,    0,   44,   99,  103,
  109,  159,  165,  166,  167,  173,  185,    0, -639,    0,
  -18,    0,    0,  923,    0,  836,    0,    0,    0,    0,
  816, -131,  890, -810,    0,  938, -467,    0,    0,    0,
    0,    0,    0,  831,    0,    0,  830,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  764,    0,    0,    0,    0,    0,    0,    0,
    0,  -43,    0, 1381,    0,    0,    0, 1008,    0,    0,
    0,    0,    0,    0, -169,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1491,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  657,    0,    0,    0,
    0,    0,    0,    0,    0,  760,    0,    0,    0,    0,
    0,    0,  -11, 1078,    0,    0,    0, 1092,
  };
  protected static readonly short [] yyTable = {           109,
   18,  155,  517,  111,  233,  732,   43,  189,  737,  514,
  234,  429,  468,  490,  156,  447,  472,  682,  428,  703,
  257,  510,  533,  776,  192,  316,  404, 1138,  544,  571,
  557,  498, 1014,  308,  949,  229,   14, 1170, 1171,  910,
  259,  890,  784,  708,  251,  323,  328,  190,  789,  539,
 1066,  506,  675,  807,  361,  302,  369,  160,  772,  302,
  161,  332, 1047,  411, 1049,  309,  353,  311, 1508,    1,
  292,  665,  871,  360,  872,  368, 1065,  337,  261, 1330,
  411,  572,  285,  286,  287, 1201,  293,  294, 1066,  322,
  327,  306,  307,   47,  334, 1007,  793,  666,  312, 1264,
  314,   20,  318,  481,  288,   47, 1206,  330,  331, 1471,
   16,  869,  289, 1458,  443,  162, 1019, 1272,  902,  163,
 1200,  904,  432,  115,  249,  164,  988, 1372,  833,  667,
  349,  367,  634,  409,  652,  472, 1016,  997,  781,  109,
 1217,  155,  233,  111, 1017,  346,  412,  290,  430,  870,
  290,  413,  711,  414,  156,  194,    6,  436,  437,  415,
  416, 1472,  507,  412,  508,  115,  249,  339,  413,  115,
  414,    2,  881,  250,  406,  165,  415,  416,  808,   94,
  782,  166,  167,  168,  795,  446,  410,  482, 1509,  169,
 1188,  430, 1338,  347,  713,  196,  793,  160,   15,  290,
  161,  170,  291,  333, 1067,  291,  726,   42,  468,  191,
  873,  438,  447,  199,  676,  250,  348,   47,  509,  478,
  979,  730,  194,  194, 1048, 1207, 1050,  571,  444,  471,
  349, 1321, 1459,  668,  476, 1322,  417,    3,    4,    5,
    6, 1331, 1067,  194, 1019,  488,  257,  231,  557,  473,
  793,  432, 1373,  427,  291,  162,  257,  751,  532,  163,
 1350,  477,  536,  115,  519,  164,  486,  541,  712,   48,
  489,  312, 1005,  557,  367,  493,  495, 1440,  339,  572,
 1079,  885,  339,  432,  334,  115,  540,  115,  580,  520,
  882,  949,  115,  690,  528,  531,  530, 1344,  796,  529,
  493,  572,  686,   54, 1464,  363,  563, 1339, 1189,  831,
  714,  578,  546,  547,  511,  165, 1474,  559, 1475, 1132,
  556,  166,  167,  168, 1436,  538,  339,  527,  969,  169,
  543, 1224, 1090,  558,  194,  194,  834,  302, 1402,  349,
  802,  170,  740,  614,  615, 1062, 1118, 1429,  471,  592,
  625,  832,  625,  600,  601,  602,  603,  604,  605,  606,
  607,  608,  609,  610, 1485,  757,  649,    2,  473,  473,
  449,  637,  639,  760,  560,  200,  977, 1074,  691, 1075,
 1302,  753,  233,  450,  998,  632,  349,  572,  430,  753,
 1345,  115,  653, 1304, 1505,  886,  194,  803,  315,  887,
  983,  683,  642,  643,  863,  911,  231,  625,  751,  385,
  885,   20,  363,    6,  354,  636,  638,  640,  949,  363,
  115,  363,  194,  363,  650,  651,  773,  449,  638, 1303,
  663,  920,  468,  638,  194,  647,  742,  638,  903,  903,
  450,  194,  115,  231,  231,  386,  937,  938,   47,  669,
  349,  231,  638,  498,  349,  472,  334,  349,  741,  349,
  231,  523,  355,  571,  349,  581,  699,  363,  702,  349,
 1144,  878,  902,  902, 1054,  582,  678, 1150,  745,  638,
  679,  758,  644,  194,  742,   94,  194,  774,  701,  761,
  709,  728,  978,  592, 1295,  735,  683,  349,  638,  700,
  432,  349, 1173,  349,  349,  349,  349,  437,  684,  742,
  744,  349,  791,  473,  793,  572,  794,  438,  903,  762,
  194,  194,  986,  356,  764,  387,  388, 1481,  887,  750,
  949,  749,  879,  759,  967, 1482,  949,  244,  556,  939,
  743,  680,  483, 1466, 1467,  742,  262,  777,  194,  194,
  484,  558,  902, 1245, 1020, 1211, 1022,  683, 1024, 1360,
  638,  737,  454,  556,  454,  962,  194,  737,  437,  684,
  797,  797,  783,  411,  918, 1305,  558,  638,  438,  826,
  194,  726,  638,  197,  347,  290,  638,  572, 1390, 1391,
  290, 1393,  317,  115,  290,  883, 1483,  730, 1245,  432,
 1499,  638, 1412,  485,   94, 1419,  433,  348,  356,  434,
  993,  248,  638, 1346,  197,  776,  737,  811,  346,  454,
 1435,  349,  939,  818, 1306,  517,  847,  939,  638,  939,
  939,  939,  939,  939,  939,  939,  939,  939,  939,  814,
  291,  816,   47,  346, 1457,  898, 1082,  638, 1084, 1003,
  848,  939,  730,  939,  356,  939,  412,  939,  939,  939,
  115,  413,  752,  414,  433, 1246,  347,  825,  471,  415,
  416,  346, 1247, 1248,  636,  703,  245,  849,  257,  846,
  246,  877,  493,  637,  194,  115, 1058,  971,  473,  348,
  536,  347, 1249,  327,  358, 1250,   94,  735,  636,  327,
  249,  893,  728,  349,  865,  730,  194,  637, 1101, 1091,
 1246,  583,  939, 1126,  348,  231, 1035, 1247, 1248,  347,
 1102,  584,  927,  315,  907,  636,  258,  927,  349,  927,
  247,  894,  927,  927,  637,  927,  927, 1249,  361,  912,
 1250,  431,  348,  358, 1251,  905, 1152,  906,  327,  250,
 1252,  347, 1227, 1244,  899,  908,  349,  777,  599,  359,
  258,  225,  811,  226,  258,  258,  258,  258,  258,  258,
  258,  258,  315, 1227,  348,  616,  617,  664, 1181,  866,
  348,  334,  592,  867,  653,  315,  913,  592,  811, 1251,
  735, 1111,  194,  334,  790, 1252,  334,  334, 1244,  715,
 1227,  347,  473,  811,  811,  664, 1326,  473,  557,  347,
  334,  962,  927,  194,  664,  401,  970,  522,  115, 1340,
  115,  260, 1213,  348,  348,  939,  358,  402, 1141,  649,
  523,   94,  348,  657,  959,  658,  489,  792, 1358, 1259,
  557,  329,  433,  669,  951,  741,  349,  524, 1055,  361,
  361,  361,  984,  361,  361,  315,  361, 1089,  361,  987,
  357,  657, 1035,  658,  115, 1172,  682,  115,  370,  995,
  358,  735,  565,  557,  856,  320, 1055,  334,  194,  566,
 1423,  320,  334,  334,  827,  334,  895,   44,  321,  334,
  397,  567,  601,  334,  601, 1001,  828, 1004,  113,  315,
  361,  194,  361, 1006,  398,  361,  334,  565,  391,  392,
 1039,  811,   94,  811,  566,  811,  194,  389,  390,  661,
  194, 1199,  393,  394, 1147, 1148,  567, 1015,  661, 1034,
  295, 1108,  296, 1269,  826, 1109,  269,  269,  334,  447,
  113, 1261, 1476,  850,  113,  269,  660,  741,  669,  473,
  851,  749,  258, 1156, 1041,  660, 1042,  749, 1043,  749,
  327,  735,  258,  327,  493, 1044,  339,  258,  326,  326,
  339,  933,  334,  339,  194,  339,  933,  399,  933, 1496,
  339,  933,  933,  412,  933,  933,  517,  754,  413,  326,
  414,  754,  194,  194, 1292,  754,  415,  416,  777,  403,
 1514, 1515, 1292,  811,  468,  811,  933, 1085,  503,  770,
  334,  400,  504,  770,  339,  770,  334,  770,  395,  396,
   64,   64,  334,  759,   64,  334,  334,  759,  279,  759,
  279,  759, 1094,  296,  225,  279,  228,  258,  113,  334,
  334,  334,  685,  334,  334,   56,  686,  435,  489,  258,
  258,  258, 1147, 1148,  258,  258,  749,  194,  749,  225,
  749,  933, 1119,  735,  777,  168,  439,  168,  718,  168,
  811,  334,  719,  332,  741, 1034, 1013,  356,  805,  194,
  326,  326,  489, 1131,  233,  489, 1159,  194,  491,  727,
  430,  115,  180,  504,  180,  473,  180,  817,  556,  442,
  356,  817,  821,  811,  470, 1092,  821, 1093,  962,  233,
 1155,  558,   65,  356,  469,  430,   65,  969,  356,  969,
  822,  231,  489,  356,  822,  356,  356,  356,  356,  761,
  556,  761,  492,  356,  753,  811, 1085,  356,  753,  513,
 1159,  356,  326,  558,  359,  156,  936,  156,  880,  356,
  880,  936,  356,  936,  356,  518,  936,  936,  521,  936,
  936, 1225, 1243,  556,  537, 1221,  113, 1226,  326,  620,
  621,  622,  623,  382,  383,  384,  558,  542,  356,  811,
  326,  936, 1225,  163,  164,  163,  164,  326, 1226,   67,
    5,   67,  929,  467,  231,  113,  811,  929,  489,  929,
  934,  935,  929,  929,  550,  929,  929, 1243,  186, 1225,
  186,  157,  576,  157,  348, 1226,  115,  113,  577,  432,
  115, 1221,  120,  115,  120,  284,  127,  284,  127,  326,
  585,  291,  326,  291,  356,  664,  936,  352, 1300, 1301,
 1123, 1124, 1337,  258, 1265,  231,  348,  439,  115, 1486,
 1487,  648,  115,  684, 1297,  710, 1337,  902,  902, 1276,
  687, 1329,  521,  521, 1332,  689,  326,  326,  716,  194,
  638,  638,  717,  923, 1368,  739, 1369,  756,  923,  763,
  923,  765,  929,  923,  923,  115,  923,  923,  766, 1136,
 1137,  618,  619,  767,  326,  326,  624,  625,  768,  785,
  355,  115,  786,  788,  800, 1347,  801,  335,  813,  805,
  815,  338,  339,  340,  341,  342,  343,  344,  345,  806,
  817,  823,  835,  355,  194,  836,  433,  838, 1403,  334,
  839,  842,  859,   42,  884,  854,  355,  860,  861,  196,
  862,  355,  194,  868,  230, 1430,  355,  888,  355,  355,
  355,  355,  889,  891,  900,  909,  355,  896, 1442, 1444,
  355,  901,  915,  923,  355,  925,  930,  735,  113, 1297,
  932,  936,  355,  940,  946,  355,  947,  355,  950,  489,
  949,  952,  955,  957,  258, 1430, 1430,  963,  497,  975,
  976,  334,  985,  334,  497,  992, 1452,  507,  194,  194,
  999,  355,  979, 1010,  249, 1011,  362,  194,  326, 1037,
 1028, 1045,  334,  334, 1061,  194,  194, 1051,  194, 1052,
 1053, 1063, 1080, 1104, 1317,  363,  364, 1073, 1077,  735,
  326, 1083,  334, 1081, 1088,  113, 1317, 1096,  194, 1100,
  334,  194, 1430,  334, 1103,  365, 1106,    5, 1105, 1317,
 1112,   47,  326,  250, 1122, 1125,  366,  355, 1127, 1139,
  113, 1134,   47, 1151, 1158, 1145,  735,   47, 1317, 1166,
 1180,   47, 1183, 1187,   47,  502, 1501, 1501, 1185, 1190,
 1195, 1199, 1203, 1510, 1510, 1198,   47,   47,  592,  592,
 1208,   47,   47, 1212, 1216, 1209, 1210,   47,  448,   47,
   47,   47,   47, 1257, 1266, 1263, 1262,   47,  473,  473,
 1273,   47,  498,   47,  335,  412, 1260,  412,  498, 1299,
 1278,  449, 1307,   47, 1320, 1335,   47, 1324,   47, 1325,
 1342, 1352,   47, 1334,  450, 1343,  412,  412,  326,  452,
 1354, 1355, 1345,  545,  453, 1357,  454,  455,  456,  457,
 1359, 1361,   47, 1363,  458, 1365,  412, 1371,  459,  326,
 1366, 1383, 1310, 1376,  412, 1379, 1382,  412, 1386, 1384,
  460, 1394, 1395,  461, 1398,  462, 1408, 1413, 1415, 1425,
 1424, 1427, 1428, 1434,  545,  334, 1437, 1438, 1449, 1448,
 1451,  334, 1454,  113, 1453,  113,  611,  612,  613,  463,
 1456,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545, 1462, 1468, 1469,
 1473, 1477, 1480, 1478,  326, 1488, 1472,  334, 1471, 1494,
 1495, 1516, 1517, 1518,    9,  965,  534,  602,  850,  113,
  492,  957,  113,  493,  672,  449,  603,  326,   29,   21,
   30,   27,  491,   29,  312, 1311,  207,   96,  517,  763,
   30,  858,  326,  755,  764,  787,  326,  788,  334,  660,
  824,  316,  826,  334,  683,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  341,  660,  334,
  123,  105,  334,  287,  130,  124,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  106,  334,  334,  288,
  131,  334,  334,  334,  334,  334,  638,  638,  334,  334,
  230,  545,   53,  334,  334,  334,  334,  334,  334,  334,
  334,  502,   21, 1029,  945, 1129,  502,  502,  326,  326,
  371, 1130,  334, 1275, 1439,  334, 1267,  334, 1470,  334,
 1426,  844,  334, 1455, 1479, 1421, 1314,  972,  334,  502,
  857,  372,  373,  374,  375,  376,  377,  378,  379,  380,
  381, 1512,  502,  502, 1327,  968,  973,  502,  974, 1274,
  502, 1349,  502, 1271,  502,  502,  502,  502, 1504, 1450,
  787, 1445,  502, 1503, 1443, 1204,  502, 1370,  941, 1318,
  502,   33, 1205,  326,  753,  991,  919,  876,  502,  917,
  799,  502,  587,  502,  502, 1064,  298,  874,  853,  502,
  548,  502,  502,  502,  502,  502,  502,  502,  502,  502,
  502,  502,  626,  326,  627,  630,  628,  502,  502,  629,
  631, 1192,  502,  502,  914,  502,  502,  502,  502,  502,
  502,  502, 1279,  502,  502, 1196,  502,  502,  502,  502,
  502,  502,  502,  502,  502,  502,  113,  502,  502,  502,
  502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
  502,  502,  502,  502,  502,  502,  502,  502,  502,  770,
  405,  502, 1107,  502, 1146,  502, 1120, 1076,  502, 1113,
 1115,  852, 1046, 1057,  502,  746, 1177,   27,   27,    0,
 1008,  646,   27, 1182,  943, 1277,   27,    0,   27,    0,
    0,   27,    0,   27,   27,    0,   27,  942,   27,    0,
   27,    0,   27,   27,   27,   27,    0,  201,   27,   27,
    0,    0,    0,    0,   27,    0,   27,   27,   27,    0,
    0,   27,   27,   27,    0,   27,    0,    0,   27,    0,
   27,   27,   27,   27,    0,    0,    0,   27,   27,   27,
    0,    0,   27,   27,   27,    0,    0,    0,    0,  202,
    0,   27,   27,    0,   27,   27,    0,   27,   27,   27,
    0,  113,    0,   27,    0,  113,    0,    0,  113,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   27,    0,  326,    0,    0,    0,   27,
   27,    0,    0,  113,    0,    0,    0,  113,   27,  203,
  204,  205,  206,    0,  207,  208,  209,  210,  211,  212,
  213,  214,    0,    0,  215,  216,  217,  218,  219,  220,
  221,  222,    0,    0,    0,    0,    0,    0,   33,    0,
  113,    0,   33,    0,    0,    0,    0,    0,  781,   27,
  326,    0,    0,   33,    0,    0,  113,    0,   33,    0,
    0,    0,   33,    0,    0,   33,    0,    0,  326,    0,
    0,    0,    0,    0,    0,    0,  545,   33,   33,    0,
    0,    0,   33,   33,    0,    0,    0,    0,   33,    0,
   33,   33,   33,   33,    0,    0,    0,    0,   33,    0,
    0,    0,   33,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   33,    0,   33,   33,    0,   33,
    0,    0,    0,   33,  326,  326,    0,    0,    0,    0,
    0,    0,    0,  326,    0,    0,    0,  852,  852,    0,
    0,  326,  326,   33,  326,  852,  852,  852,  852,  852,
   33,  852,  852,    0,  852,  852,  852,  852,  852,  852,
  852,  852,    0,    0,  326,    0,  852,  326,  852,  852,
  852,  852,  852,  852,  334,    0,  852,    0,    0,    0,
  852,  852,    0,  852,  852,  852,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  852,    0,  852,    0,  852,
  852,    0,    0,  852,    0,  852,  852,  852,  852,  852,
  852,  852,  852,  852,  852,  852,  852,    0,  852,    0,
    0,  852,  852,    0,    0,  852,  852,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  852,  852,  852,  852,  852,    0,    0,    0,  852,  852,
    0,    0,  852,    0,    0,    0,    0,  852,  852,  852,
  852,  852,    0,    0,    0,  852,    0,  852,    0,    0,
    0,    0,    0,  852,  852,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  852,  852,
  852,  852,    0,  852,  781,  781,    0,    0,    0,    0,
  852,    0,  781,  781,  781,  781,  781,    0,  781,  781,
  738,  781,  781,  781,  781,  781,  781,  781,    0,    0,
    0,    0,    0,  781,    0,  781,  781,  781,  781,  781,
  781,    0,    0,  781,    0,    0,    0,  781,  781,    0,
  781,  781,  781,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  781,    0,  781,    0,  781,  781,    0,    0,
  781,    0,  781,  781,  781,  781,  781,  781,  781,  781,
  781,  781,  781,  781,    0,  781,    0,    0,  781,  781,
    0,    0,  781,  781,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  781,  781,  781,
  781,  781,    0,    0,    0,  781,  781,    0,    0,  781,
    0,    0,    0,    0,  781,  781,  781,  781,  781,    0,
  334,    0,  781,    0,  781,  334,  334,    0,    0,    0,
  781,  781,    0,    0,    0,    0,    0,    0,    0,    0,
  327,    0,    0,    0,    0,    0,    0,    0,  334,    0,
    0,    0,    0,    0,    0,  781,  781,  781,  781,    0,
  781,  334,  334,    0,    0,    0,  334,  781,    0,  334,
    0,  334,    0,  334,  334,  334,  334,    0,    0,    0,
    0,  334,    0,    0,    0,  334,    0,    0,    0,  334,
    0,    0,    0,    0,    0,    0,    0,  334,    0,    0,
  334,    0,  334,  334,    0,    0,    0,    0,  334,    0,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,    0,    0,    0,    0,  334,  334,    0,    0,
    0,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,    0,  334,  334,    0,    0,  334,  334,  334,  334,
  334,    0,    0,  334,  334,    0,    0,    0,  334,  334,
  334,  334,  334,  334,  334,  334,  738,    0,    0,    0,
  364,  738,  738,    0,    0,    0,    0,  334,    0,    0,
  334,    0,  334,    0,  334,    0,    0,  334,    0,    0,
    0,    0,    0,  334,  738,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  738,  738,    0,
    0,    0,  738,    0,    0,  738,    0,  738,    0,  738,
  738,  738,  738,    0,    0,    0,    0,  738,    0,    0,
    0,  738,    0,    0,    0,  738,    0,    0,    0,    0,
    0,    0,    0,  738,    0,    0,  738,    0,  738,  738,
    0,    0,    0,    0,  738,    0,  738,  738,  738,  738,
  738,  738,  738,  738,  738,  738,  738,    0,    0,    0,
    0,    0,  738,  738,  359,    0,    0,  738,  738,  738,
  738,  738,  738,    0,  738,  738,  738,    0,  738,  738,
    0,    0,  738,  738,  738,  738,  327,    0,    0,  738,
  738,  327,  327,    0,  738,  738,  738,  738,  738,  738,
  738,  738,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  738,  327,    0,  738,    0,  738,    0,
  738,    0,    0,  738,    0,    0,    0,  327,  327,  738,
    0,    0,  327,    0,    0,  327,    0,  327,    0,  327,
  327,  327,  327,    0,    0,    0,    0,  327,    0,    0,
    0,  327,    0,    0,    0,  327,    0,    0,    0,    0,
    0,    0,    0,  327,    0,    0,  327,    0,  327,  327,
    0,    0,    0,    0,  327,    0,  327,  327,  327,  327,
  327,  327,  327,  327,  327,  327,  327,    0,    0,    0,
    0,    0,  327,  327,   34,    0,    0,  327,  327,  327,
  327,  327,  327,    0,  327,  327,  327,    0,  327,  327,
    0,    0,  327,  327,  327,  327,  364,    0,    0,  327,
  327,  364,  364,    0,  327,  327,  327,  327,  327,  327,
  327,  327,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,    0,  327,  364,    0,  327,    0,  327,    0,
  327,    0,    0,  327,    0,    0,    0,  364,  364,  327,
    0,    0,  364,    0,    0,  364,    0,  364,    0,  364,
  364,  364,  364,    0,    0,    0,    0,  364,    0,    0,
   27,  364,    0,    0,    0,  364,    0,    0,    0,    0,
    0,    0,    0,  364,    0,    0,  364,    0,  364,  364,
    0,    0,    0,    0,  364,    0,  364,  364,  364,  364,
  364,  364,  364,  364,  364,  364,  364,    0,    0,    0,
  359,    0,  364,  364,    0,    0,  359,  364,  364,    0,
  364,  364,  364,    0,  364,  364,  364,    0,  364,  364,
    0,    0,  364,  364,  364,  364,    0,    0,    0,  364,
  364,    0,    0,    0,  364,  364,  364,  364,  364,  364,
  364,  364,  359,   31,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  364,    0,    0,  364,    0,  364,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  359,    0,    0,  947,    0,  359,    0,
  359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
  359,    0,    0,    0,    0,    0,    0,  359,    0,    0,
    0,  359,  359,    0,  359,  359,  359,    0,  359,  359,
  359,    0,  359,  359,    0,    0,  359,  359,  359,  359,
    0,   34,    0,  359,  359,   34,    0,    0,  359,  359,
  359,  359,  359,  359,  359,  359,   34,    0,    0,   47,
    0,   34,    0,    0,    0,   34,    0,  359,   34,    0,
  359,    0,  359,    0,    0,    0,    0,    0,    0,    0,
   34,   34,    0,  359,   32,   34,   34,    0,   32,    0,
    0,   34,    0,   34,   34,   34,   34,    0,    0,   32,
    0,   34,    7,    0,   32,   34,    0,   34,   32,    0,
    0,   32,    0,    0,    0,    0,    0,   34,    0,   34,
   34,    0,   34,   32,   32,    0,   34,   27,   32,   32,
    0,   27,    0,    0,   32,    0,   32,   32,   32,   32,
    0,    0,   27,    0,   32,  948,   34,   27,   32,    0,
   32,   27,   34,   34,   27,    0,    0,    0,    0,    0,
   32,    0,    0,   32,    0,   32,   27,   27,    0,   32,
    0,   27,   27,    0,    0,    0,    0,   27,    0,   27,
   27,   27,   27,    0,    0,    0,    0,   27,   48,   32,
    0,   27,    0,   27,    0,   32,   32,    0,    0,    0,
    0,    0,    0,   27,    0,    0,   27,    0,   27,    0,
   31,    0,   27,    0,   31,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
   31,    0,   27,    0,   31,    0,    0,   31,   27,   27,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   31,
   31,    0,    0,  947,   31,   31,    0,   47,    0,    0,
   31,    0,   31,   31,   31,   31,    0,    0,   47,    0,
   31,    0,    0,   47,   31,    0,   31,   47,    0,    0,
   47,    0,    0,    0,    0,    0,   31,    0,    0,   31,
    0,   31,   47,   47,    0,   31,    0,   47,   47,    0,
    0,    0,    0,   47,    0,   47,   47,   47,   47,    0,
    0,    0,    0,   47,    0,   31,   47,   47,    0,   47,
   47,    0,   31,    0,    0,    0,    0,    0,    0,   47,
    0,   47,   47,    0,   47,    0,   47,    0,   47,    0,
   47,    0,    0,   47,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,   47,    0,   47,    7,
   47,   47,    0,   48,    0,    0,   47,    0,   47,   47,
   47,   47,    0,    0,   48,    0,   47,    0,    0,   48,
   47,    0,   47,   48,    0,    0,   48,    0,    0,    0,
    0,    0,   47,    0,    0,   47,    0,   47,   48,   48,
    0,   47,  948,   48,   48,    0,   47,    0,    0,   48,
    0,   48,   48,   48,   48,    0,    0,   47,    0,   48,
    0,   47,   47,   48,    0,   48,   47,    0,    0,   47,
    0,    0,    0,    0,    0,   48,    0,    0,   48,    0,
   48,   47,   47,    0,   48,   48,   47,   47,    0,   48,
    0,    0,   47,    0,   47,   47,   47,   47,    0,    0,
   48,    0,   47,    0,   48,   48,   47,    0,   47,   48,
    0,    0,   48,    0,    0,    0,    0,    0,   47,    0,
    0,   47,    0,   47,   48,   48,    0,   47,    0,   48,
   48,    0,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,   47,    0,   48,
    0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,    0,   55,   48,    0,   48,    0,    0,    0,
   48,   56,   24,   57,   25,    0,    0,   26,   58,    0,
   59,   60,   27,   61,   62,   63,   28,    0,    0,    0,
   48,    0,   64,    0,   65,   30,   66,   67,   68,   69,
    0,    0,   32,    0,    0,    0,   70,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,   36,    0,   37,   74,    0,    0,   38,
    0,   75,   76,   77,   78,   79,   80,   39,   40,   81,
   82,   41,   83,    0,   84,    0,    0,   85,   86,    0,
  334,   87,   88,    0,    0,    0,  334,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,   94,    0,    0,    0,   95,    0,
    0,    0,    0,   96,   97,   98,   99,  100,    0,    0,
    0,  101,  334,  102,    0,    0,    0,    0,    0,  103,
  104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  334,    0,    0,    0,
    0,    0,  334,    0,  105,  106,  107,  108,    0,    0,
    0,    0,    0,  334,    0,    0,  196,    0,  334,    0,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,    0,    0,    0,    0,    0,  334,  334,    0,
    0,    0,  334,  334,  334,  334,  334,  334,  334,  334,
  334,    0,  334,  334,    0,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,    0,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,    0,  504,
    0,    0,  334,    0,  334,  504,    0,  334,    0,    0,
    0,    0,    0,  334,    0,    0,    0,    0,  334,    0,
    0,  334,    0,  334,  334,    0,    0,    0,  334,  334,
    0,    0,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  504,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  334,  334,    0,    0,    0,    0,    0,    0,
  334,    0,    0,  334,    0,    0,    0,    0,    0,  334,
    0,    0,  504,    0,    0,    0,    0,  504,    0,  504,
  504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
  584,  504,  504,    0,  504,  504,  504,  504,  504,  504,
  504,  504,  504,  504,    0,  504,  504,  504,  504,  504,
  504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
  504,  504,  504,  504,  504,  504,  504,    0,  500,    0,
    0,    0,    0,  504,  500,    0,    0,    0,    0,    0,
    0,    0,  504,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  500,    0,    0,  584,    0,    0,    0,    0,  584,    0,
  584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
  584,    0,    0,    0,    0,    0,    0,    0,    0,  390,
    0,    0,  584,    0,  584,  390,  584,    0,  584,  584,
  584,  500,    0,    0,    0,    0,  500,    0,  500,  500,
  500,  500,  500,  500,  500,  500,  500,  500,  500,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  500,
  500,  390,  500,  500,  500,  500,  500,  500,  500,    0,
  500,  500,    0,  500,  500,  500,  500,  500,  500,  500,
  500,  500,  500,  584,  500,  500,  500,  500,  500,  500,
  500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
  500,  500,  500,  500,  500,  500,    0,  508,    0,    0,
    0,    0,  500,  508,    0,  500,    0,    0,    0,    0,
    0,  500,    0,    0,    0,    0,  327,    0,    0,    0,
    0,  390,  327,    0,  390,  390,  390,  390,    0,  390,
    0,  390,  390,    0,  390,  390,  390,  390,  390,  508,
  390,  390,  390,  390,    0,  390,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  390,  390,    0,    0,    0,
    0,  327,    0,  390,    0,    0,  390,    0,    0,    0,
  508,    0,  390,    0,    0,  508,    0,  508,  508,  508,
  508,  508,  508,  508,  508,  508,  508,  508,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  508,
    0,  508,  508,  508,  508,  508,  508,  508,    0,  508,
  508,    0,  508,  508,  508,  508,  508,  508,  508,  508,
  508,  508,    0,  508,  508,  508,  508,  508,  508,  508,
  508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
  508,  508,  508,  508,  508,    0,  334,  747,    0,    0,
    0,  508,  334,    0,  508,    0,   24,    0,   25,    0,
  508,   26,    0,    0,    0,    0,   27,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,  334,    0,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
    0,   39,   40,    0,    0,   41,    0,    0,  748,  334,
    0,    0,    0,    0,  334,    0,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,    0,    0,    0,
    0,    0,    0,    0,  290,    0,    0,    0,  334,    0,
  334,  334,  334,  334,  334,  334,  334,    0,  334,  334,
    0,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,    0,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,    0,  433,  562,    0,    0,  320,
  334,  433,    0,  334,    0,   24,    0,   25,    0,  334,
   26,    0,    0,    0,    0,   27,    0,    0,    0,   28,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,  433,    0,    0,
   33,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,    0,
    0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
   39,   40,    0,    0,   41,    0,    0,  319,  433,    0,
    0,    0,    0,  433,    0,  433,  433,  433,  433,  433,
  433,  433,  433,  433,  433,  433,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  433,    0,  433,
  433,  433,  433,  433,  433,  433,    0,  433,  433,    0,
  433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
    0,  433,  433,  433,  433,  433,  433,  433,  433,  433,
  433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
  433,  433,  433,    0,  393,    0,  448,    0,  352,  433,
  393,    0,  433,    0,    0,    0,    0,    0,  433,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  449,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  450,    0,    0,    0,  393,  452,    0,    0,
    0,    0,  453,    0,  454,  455,  456,  457,    0,    0,
    0,    0,  458,    0,    0,    0,  459,    0,    0,  334,
    0,    0,    0,    0,    0,  334,    0,    0,  460,  741,
    0,  461,    0,  462,    0,    0,    0,  393,    0,    0,
    0,    0,  393,    0,  393,  393,  393,  393,  393,  393,
  393,  393,  393,  393,  393,    0,    0,  463,    0,    0,
    0,  334,    0,    0,    0,    0,  393,    0,  393,  393,
  393,  393,  393,  393,  393,    0,  393,  741,    0,  393,
  393,  393,  393,  393,  393,  393,  393,  393,  393,    0,
  393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,  582, 1325,    0,    0,    0,    0,  393,    0,
  334,  393,    0,    0,    0,    0,  334,  393,    0,    0,
    0,  334,  334,  334,  334,  334,  334,  334,  741,  334,
    0,  334,  334,    0,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,    0,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,    0,  539,    0,
    0,  334,    0,  334,  539,    0,  334,    0,    0,    0,
    0,    0,  334,    0,    0,  582,    0,    0,    0,    0,
  582,    0,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,    0,    0,    0,    0,    0,    0,    0,
  539,    0,    0,    0,  582,    0,  582,    0,  582,    0,
  582,  582,  582,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  582,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  539,    0,    0,    0,    0,  539,    0,  539,  539,
  539,  539,  539,  539,  539,  539,  539,  539,  539,    0,
    0,    0,    0,    0,    0,  582,    0,    0,    0,    0,
  539,    0,  539,    0,  539,    0,  539,  539,  539,    0,
  539,  539,    0,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,    0,    0,    0,  539,  539,  539,  539,
  539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,  539,  551,  539,    0,    0,    0,    0,
  551,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   24,  539,   25,    0,    0,   26,    0,    0,    0,    0,
   27,    0,    0,    0,   28,    0,    0,    0,   29,    0,
    0,    0,    0,   30,    0,    0,  551,    0,   31,    0,
   32,    0,    0,    0,    0,   33,    0,    0,    0,   34,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,  555,   37,    0,    0,    0,   38,  555,    0,
    0,    0,    0,    0,    0,   39,   40,  551,    0,   41,
    0,    0,  551,    0,  551,  551,  551,  551,  551,  551,
  551,  551,  551,  551,  551,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  555,    0,  551,    0,  551,    0,
  551,    0,  551,  551,  551,    0,  551,  551,    0,    0,
  551,  551,  551,  551,  551,  551,  551,  551,  551,    0,
    0,    0,  551,  551,  551,  551,  551,  551,  551,  551,
    0,    0,    0,    0,    0,  555,    0,    0,    0,    0,
  555,  551,  555,  555,  555,  555,  555,  555,  555,  555,
  555,  555,  555,   42,    0,    0,  558,  551,    0,    0,
    0,    0,  558,    0,  555,    0,  555,    0,  555,    0,
  555,  555,  555,    0,  555,  555,    0,    0,  555,  555,
  555,  555,    0,    0,    0,  555,  555,    0,    0,    0,
  555,  555,  555,  555,  555,  555,  555,  555,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  555,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  556,  555,    0,    0,    0,    0,
  556,    0,    0,    0,    0,    0,    0,    0,    0,  558,
    0,    0,    0,    0,  558,    0,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  556,    0,  558,    0,
  558,    0,  558,    0,  558,  558,  558,    0,  558,  558,
    0,    0,  558,  558,  558,  558,    0,    0,    0,  558,
  558,    0,    0,    0,  558,  558,  558,  558,  558,  558,
  558,  558,    0,    0,    0,    0,    0,  556,    0,    0,
    0,    0,  556,  558,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,    0,    0,    0,  557,  558,
    0,    0,    0,    0,  557,    0,  556,    0,  556,    0,
  556,    0,  556,  556,  556,    0,  556,  556,    0,    0,
  556,  556,  556,  556,    0,    0,    0,  556,  556,    0,
    0,    0,  556,  556,  556,  556,  556,  556,  556,  556,
  557,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  561,  556,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  557,    0,    0,    0,    0,  557,    0,  557,  557,
  557,  557,  557,  557,  557,  557,  557,  557,  557,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  557,    0,  557,    0,  557,    0,  557,  557,  557,    0,
  557,  557,    0,    0,  557,  557,  557,  557,    0,    0,
    0,  557,  557,    0,  562,    0,  557,  557,  557,  557,
  557,  557,  557,  557,    0,    0,    0,    0,    0,  561,
    0,    0,    0,    0,  561,  557,  561,  561,  561,  561,
  561,  561,  561,  561,  561,  561,  561,    0,    0,    0,
    0,  557,    0,    0,    0,    0,    0,    0,  561,    0,
  561,    0,  561,    0,  561,  561,  561,    0,    0,    0,
    0,    0,  561,  561,  561,  561,    0,    0,    0,  561,
  561,    0,  563,    0,  561,  561,  561,  561,  561,  561,
  561,  561,    0,    0,    0,    0,    0,  562,    0,    0,
    0,    0,  562,  561,  562,  562,  562,  562,  562,  562,
  562,  562,  562,  562,  562,    0,    0,    0,    0,  561,
    0,    0,    0,    0,    0,    0,  562,    0,  562,    0,
  562,    0,  562,  562,  562,    0,    0,    0,    0,    0,
  562,  562,  562,  562,    0,    0,    0,  562,  562,    0,
  564,    0,  562,  562,  562,  562,  562,  562,  562,  562,
    0,    0,    0,    0,    0,  563,    0,    0,    0,    0,
  563,  562,  563,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,    0,    0,    0,    0,  562,    0,    0,
    0,    0,    0,    0,  563,    0,  563,    0,  563,    0,
  563,  563,  563,    0,    0,    0,    0,    0,  563,  563,
  563,  563,    0,    0,    0,  563,  563,    0,  565,    0,
  563,  563,  563,  563,  563,  563,  563,  563,    0,    0,
    0,    0,    0,  564,    0,    0,    0,    0,  564,  563,
  564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
  564,    0,    0,    0,    0,  563,    0,    0,    0,    0,
    0,    0,  564,    0,  564,    0,  564,    0,  564,  564,
  564,    0,    0,    0,    0,    0,  564,  564,  564,  564,
    0,    0,    0,  564,  564,    0,  566,    0,    0,    0,
  564,  564,  564,  564,  564,  564,    0,    0,    0,    0,
    0,  565,    0,    0,    0,    0,  565,  564,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,    0,
    0,    0,    0,  564,    0,    0,    0,    0,    0,    0,
  565,    0,  565,    0,  565,    0,  565,  565,  565,    0,
    0,    0,    0,    0,  565,  565,  565,  565,    0,    0,
    0,  565,  565,    0,  567,    0,    0,    0,  565,  565,
  565,  565,  565,  565,    0,    0,    0,    0,    0,  566,
    0,    0,    0,    0,  566,  565,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,    0,    0,    0,
    0,  565,    0,    0,    0,    0,    0,    0,  566,    0,
  566,    0,  566,    0,  566,  566,  566,    0,    0,    0,
    0,    0,  566,  566,  566,  566,    0,    0,    0,  566,
  566,    0,  568,    0,    0,    0,  566,  566,  566,  566,
  566,  566,    0,    0,    0,    0,    0,  567,    0,    0,
    0,    0,  567,  566,  567,  567,  567,  567,  567,  567,
  567,  567,  567,  567,  567,    0,    0,    0,    0,  566,
    0,    0,    0,    0,    0,    0,  567,    0,  567,    0,
  567,    0,  567,  567,  567,    0,    0,    0,    0,    0,
  567,  567,  567,  567,    0,    0,    0,  567,  567,    0,
  569,    0,    0,    0,  567,  567,  567,  567,  567,  567,
    0,    0,    0,    0,    0,  568,    0,    0,    0,    0,
  568,  567,  568,  568,  568,  568,  568,  568,  568,  568,
  568,  568,  568,    0,    0,    0,    0,  567,    0,    0,
    0,    0,    0,    0,  568,    0,  568,    0,  568,    0,
  568,  568,  568,    0,    0,    0,    0,    0,  568,  568,
  568,  568,    0,    0,    0,  568,  568,    0,  570,    0,
    0,    0,  568,  568,  568,  568,  568,  568,    0,    0,
    0,    0,    0,  569,    0,    0,    0,    0,  569,  568,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
  569,    0,    0,    0,    0,  568,    0,    0,    0,    0,
    0,    0,  569,    0,  569,    0,  569,    0,  569,  569,
  569,    0,    0,    0,    0,    0,    0,    0,  569,  569,
    0,    0,    0,  569,  569,    0,  571,    0,    0,    0,
    0,    0,  569,  569,  569,  569,    0,    0,    0,    0,
    0,  570,    0,    0,    0,    0,  570,  569,  570,  570,
  570,  570,  570,  570,  570,  570,  570,  570,  570,    0,
    0,    0,    0,  569,    0,    0,    0,    0,    0,    0,
  570,    0,  570,    0,  570,    0,  570,  570,  570,    0,
    0,    0,    0,    0,    0,    0,  570,  570,    0,    0,
    0,  570,  570,    0,  572,    0,    0,    0,    0,    0,
  570,  570,  570,  570,    0,    0,    0,    0,    0,  571,
    0,    0,    0,    0,  571,  570,  571,  571,  571,  571,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
    0,  570,    0,    0,    0,    0,    0,    0,  571,    0,
  571,    0,  571,    0,  571,  571,  571,    0,    0,    0,
    0,    0,    0,    0,  571,  571,    0,    0,    0,  571,
  571,    0,  573,    0,    0,    0,    0,    0,  571,  571,
  571,  571,    0,    0,    0,    0,    0,  572,    0,    0,
    0,    0,  572,  571,  572,  572,  572,  572,  572,  572,
  572,  572,  572,  572,  572,    0,    0,    0,    0,  571,
    0,    0,    0,    0,    0,    0,  572,    0,  572,    0,
  572,    0,  572,  572,  572,    0,    0,    0,    0,    0,
    0,    0,  572,  572,    0,    0,    0,  572,  572,    0,
  574,    0,    0,    0,    0,    0,    0,    0,  572,  572,
    0,    0,    0,    0,    0,  573,    0,    0,    0,    0,
  573,  572,  573,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,    0,    0,    0,    0,  572,    0,    0,
    0,    0,    0,    0,  573,    0,  573,    0,  573,    0,
  573,  573,  573,    0,    0,    0,    0,    0,    0,    0,
  573,  573,    0,    0,    0,  573,  573,    0,  575,    0,
    0,    0,    0,    0,    0,    0,  573,  573,    0,    0,
    0,    0,    0,  574,    0,    0,    0,    0,  574,  573,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,    0,    0,    0,    0,  573,    0,    0,    0,    0,
    0,    0,  574,    0,  574,    0,  574,    0,  574,  574,
  574,    0,    0,    0,    0,    0,    0,    0,    0,  574,
    0,    0,    0,  574,  574,    0,  576,    0,    0,    0,
    0,    0,    0,    0,  574,  574,    0,    0,    0,    0,
    0,  575,    0,    0,    0,    0,  575,  574,  575,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,    0,
    0,    0,    0,  574,    0,    0,    0,    0,    0,    0,
  575,    0,  575,    0,  575,    0,  575,  575,  575,    0,
    0,    0,    0,    0,    0,    0,    0,  575,    0,    0,
    0,  575,  575,    0,  577,    0,    0,    0,    0,    0,
    0,    0,  575,  575,    0,    0,    0,    0,    0,  576,
    0,    0,    0,    0,  576,  575,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,    0,    0,    0,
    0,  575,    0,    0,    0,    0,    0,    0,  576,    0,
  576,    0,  576,    0,  576,  576,  576,    0,    0,    0,
    0,    0,    0,    0,    0,  576,    0,    0,    0,    0,
  576,    0,  578,    0,    0,    0,    0,    0,    0,    0,
  576,  576,    0,    0,    0,    0,    0,  577,    0,    0,
    0,    0,  577,  576,  577,  577,  577,  577,  577,  577,
  577,  577,  577,  577,  577,    0,    0,    0,    0,  576,
    0,    0,    0,    0,    0,    0,  577,    0,  577,    0,
  577,    0,  577,  577,  577,    0,    0,    0,    0,    0,
    0,    0,    0,  577,    0,    0,    0,    0,  577,    0,
  579,    0,    0,    0,    0,    0,    0,    0,  577,  577,
    0,    0,    0,    0,    0,  578,    0,    0,    0,    0,
  578,  577,  578,  578,  578,  578,  578,  578,  578,  578,
  578,  578,  578,    0,    0,    0,    0,  577,    0,    0,
    0,    0,    0,    0,  578,    0,  578,    0,  578,    0,
  578,  578,  578,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  578,    0,  580,    0,
    0,    0,    0,    0,    0,    0,  578,  578,    0,    0,
    0,    0,    0,  579,    0,    0,    0,    0,  579,  578,
  579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
  579,    0,    0,    0,    0,  578,    0,    0,    0,    0,
    0,    0,  579,    0,  579,    0,  579,    0,  579,  579,
  579,    0,    0,    0,  581,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  579,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  579,  579,    0,    0,    0,    0,
    0,  580,    0,    0,    0,    0,  580,  579,  580,  580,
  580,  580,  580,  580,  580,  580,  580,  580,  580,    0,
    0,    0,    0,  579,    0,    0,    0,    0,    0,    0,
  580,    0,  580,    0,  580,    0,  580,  580,  580,    0,
    0,    0,    0,  334,    0,    0,    0,  741,    0,    0,
    0,    0,  580,    0,    0,    0,    0,  581,    0,    0,
    0,    0,  581,  580,  581,  581,  581,  581,  581,  581,
  581,  581,  581,  581,  581,  580,    0,    0,    0,  334,
    0,    0,    0,    0,    0,    0,  581,    0,  581,    0,
  581,  580,  581,  581,  581,  741,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  581,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  581,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  581,    0,    0,    0,    0,    0,    0,  334,    0,
    0,    0,    0,    0,  334,    0,    0,  581,    0,  334,
  334,    0,  334,    0,  334,    0,  741,  334,    0,  334,
  334,    0,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,    0,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,    0,    0,   55,    0,  334,
    0,  334,    0,    0,  334,   56,   24,   57,   25,    0,
  334,   26,   58,    0,   59,   60,   27,   61,   62,   63,
   28,    0,    0,    0,    0,    0,   64,    0,   65,   30,
   66,   67,   68,   69,    0,    0,   32,    0,    0,    0,
   70,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,   36,    0,   37,
   74,    0,    0,   38,    0,   75,   76,   77,   78,   79,
   80,   39,   40,   81,   82,   41,   83,    0,   84,    0,
    0,   85,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  265,    0,    0,    0,  105,  106,
  107,  108,   56,   24,   57,   25,    0,    0,   26,   58,
    0,   59,   60,   27,   61,   62,   63,   28,    0,    0,
    0,    0,    0,   64,    0,   65,   30,   66,   67,   68,
   69,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   36,    0,   37,   74,    0,    0,
   38,    0,   75,   76,   77,   78,   79,   80,   39,   40,
   81,   82,   41,   83,    0,   84,    0,    0,   85,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,   93,    0,    0,    0,   94,    0,    0,    0,   95,
    0,    0,    0,    0,   96,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  551,    0,    0,    0,  105,  106,  107,  108,   56,
   24,   57,   25,    0,    0,   26,   58,    0,   59,   60,
   27,   61,   62,   63,   28,    0,    0,    0,    0,    0,
   64,    0,   65,   30,   66,   67,   68,   69,    0,    0,
   32,    0,    0,    0,   70,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,   36,    0,   37,   74,    0,    0,   38,    0,   75,
   76,   77,   78,   79,   80,   39,   40,   81,   82,   41,
   83,    0,   84,    0,    0,   85,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,   94,    0,    0,    0,   95,    0,    0,    0,
    0,   96,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  944,    0,
    0,    0,  105,  552,  107,  108,  944,  944,  944,  944,
    0,    0,  944,  944,    0,  944,  944,  944,  944,  944,
  944,  944,    0,    0,    0,    0,    0,  944,    0,  944,
  944,  944,  944,  944,  944,    0,    0,  944,    0,    0,
    0,  944,  944,    0,  944,  944,  944,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  944,    0,  944,    0,
  944,  944,    0,    0,  944,    0,  944,  944,  944,  944,
  944,  944,  944,  944,  944,  944,  944,  944,    0,  944,
    0,    0,  944,  944,    0,    0,  944,  944,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  944,  944,  944,  944,  944,    0,    0,    0,  944,
    0,    0,    0,  944,    0,    0,    0,    0,  944,  944,
  944,  944,  944,    0,    0,    0,  944,    0,  944,    0,
    0,    0,    0,    0,  944,  944,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  792,    0,    0,    0,  944,
  944,  944,  944,  792,  792,  792,  792,    0,    0,  792,
  792,    0,  792,  792,  792,  792,  792,  792,  792,    0,
    0,    0,    0,    0,  792,    0,  792,  792,  792,  792,
  792,  792,    0,    0,  792,    0,    0,    0,  792,  792,
    0,  792,  792,  792,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  792,    0,  792,    0,  792,  792,    0,
    0,  792,    0,  792,  792,  792,  792,  792,  792,  792,
  792,  792,  792,  792,  792,    0,  792,    0,    0,  792,
  792,    0,    0,  792,  792,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  792,  792,
  792,  792,  792,    0,    0,    0,  792,    0,    0,    0,
  792,    0,    0,    0,    0,  792,  792,  792,  792,  792,
    0,    0,    0,  792,    0,  792,    0,    0,    0,    0,
    0,  792,  792,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  733,    0,    0,    0,  792,  792,  792,  792,
   56,   24,    0,   25,    0,    0,   26,  253,    0,  892,
    0,   27,   61,   62,    0,   28,    0,    0,   24,    0,
   25,   64,    0,   26,   30,    0,    0,    0,   27,    0,
    0,   32,   28,    0,    0,    0,   33,    0,   71,   72,
   34,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,   36,   33,   37,   74,    0,   34,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,   36,
   41,   37,    0,    0,    0,   38,    0,   86,    0,    0,
   87,   88,    0,   39,   40,    0,    0,   41,    0,    0,
  319,    0,    0,    0,    0,   89,   90,   91,   92,  300,
    0,    0,    0,  513,  734,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  921,
    0,    0,    0,  105,  301,  107,  108,   56,   24,    0,
   25,    0,    0,   26,  253,    0, 1038,    0,   27,   61,
   62,  352,   28,    0,    0,   24,    0,   25,   64,    0,
   26,   30,    0,    0,    0,   27,    0,    0,   32,   28,
    0,    0,    0,   33,    0,   71,   72,   34,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,   36,
   33,   37,   74,  922,   34,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,   36,   41,   37,    0,
    0,    0,   38,    0,   86,    0,    0,   87,   88,    0,
   39,   40,    0,    0,   41,    0,    0,  319,    0,    0,
    0,    0,   89,   90,   91,   92,  300,    0,    0,    0,
  513,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
    0,    0,    0,    0,    0,  103,  104,    0,    0,    0,
    0,    0,    0,   56,   24,    0,   25,    0,    0,   26,
  253,    0,    0,    0,   27,   61,   62,    0,   28,    0,
  105,  301,  107,  108,   64,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,  352,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  254,    0,   41,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  300,    0,    0,    0,  720,  990,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,  102,    0,    0,    0,    0,
    0,  103,  104,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  733,    0,  105,  721,  107,  108,
    0,    0,   56,   24,    0,   25,    0,  722,   26,  253,
    0,    0,    0,   27,   61,   62,    0,   28,    0,    0,
  173,    0,  173,   64,    0,  173,   30,    0,    0,    0,
  173,    0,    0,   32,  173,    0,    0,    0,   33,    0,
   71,   72,   34,  173,    0,    0,    0,    0,    0,    0,
  173,    0,    0,    0,   36,  173,   37,   74,  922,  173,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  254,  173,   41,  173,    0,    0,    0,  173,    0,   86,
    0,    0,   87,   88,    0,  173,  173,    0,    0,  173,
    0,    0,  173,    0,    0,    0,    0,   89,   90,   91,
   92,  300,    0,    0,    0,  513,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,  968,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  253,    0,    0,    0,   27,
   61,   62,    0,   28,    0,  105,  301,  107,  108,   64,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,  173,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  254,    0,   41,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,  300,    0,    0,
    0,  720,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,    0,  103,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  733,
    0,  105,  721,  107,  108,    0,    0,   56,   24,    0,
   25,    0,  722,   26,  253,    0,    0,    0,   27,   61,
   62,    0,   28,    0,    0,  173,    0,  173,   64,    0,
  173,   30,    0,    0,    0,  173,    0,    0,   32,  173,
    0,    0,    0,   33,    0,   71,   72,   34,  173,    0,
    0,    0,    0,    0,    0,  173,    0,    0,    0,   36,
  173,   37,   74,    0,  173,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,  173,   41,  173,    0,
    0,    0,  173,    0,   86,    0,    0,   87,   88,    0,
  173,  173,    0,    0,  173,    0,    0,  173,    0,    0,
    0,    0,   89,   90,   91,   92,  300,    0,    0,    0,
  513,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
  968,    0,    0,    0,    0,  103,  104,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  586,    0,    0,    0,
  105,  301,  107,  108,   56,   24,    0,   25,    0,    0,
   26,  253,    0,    0,    0,   27,   61,   62,  173,   28,
    0,    0,   24,    0,   25,   64,    0,   26,   30,    0,
    0,    0,   27,    0,    0,   32,   28,    0,    0,    0,
   33,    0,   71,   72,   34,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,   36,   33,   37,   74,
    0,   34,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  254,   36,   41,   37,    0,    0,    0,   38,
    0,   86,    0,    0,   87,   88,    0,   39,   40,    0,
    0,   41,    0,    0,  319,    0,    0,    0,    0,   89,
   90,   91,   92,   93,    0,    0,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  810,    0,    0,    0,  105,  106,  107,
  108,   56,   24,    0,   25,    0,    0,   26,  253,    0,
    0,    0,   27,   61,   62,  352,   28,    0,    0,   24,
    0,   25,   64,    0,   26,   30,    0,    0,    0,   27,
    0,    0,   32,   28,    0,    0,    0,   33,    0,   71,
   72,   34,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,   36,   33,   37,   74,    0,   34,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  254,
   36,   41,   37,    0,    0,    0,   38,    0,   86,    0,
    0,   87,   88,    0,   39,   40,    0,    0,   41,    0,
    0,  515,    0,    0,    0,    0,   89,   90,   91,   92,
  300,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,    0,  103,
  104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1174,    0,    0,    0,  105,  301,  107,  108,   56,   24,
    0,   25,    0,    0,   26,  253,    0,    0,    0,   27,
   61,   62,  352,   28,    0,    0,   24,    0,   25,   64,
    0,   26,   30,    0,    0,    0,   27,    0,    0,   32,
   28,    0,    0,    0,   33,    0,   71,   72,   34,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
   36,   33,   37,   74,    0,   34,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  254,   36,   41,   37,
    0,    0,    0,   38,    0,   86,    0,    0,   87,   88,
    0,   39,   40,    0,    0,   41,    0,    0,  568,    0,
    0,    0,    0,   89,   90,   91,   92,  300,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,    0,  103,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  606,    0,    0,
    0,  105,  301,  107,  108,  606,  606,    0,  606,    0,
    0,  606,  606,    0,    0,    0,  606,  606,  606,  352,
  606,    0,    0,   24,    0,   25,  606,    0,   26,  606,
    0,    0,    0,   27,    0,    0,  606,   28,    0,    0,
    0,  606,    0,  606,  606,  606,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,  606,   33,  606,
  606,    0,   34,  606,    0,    0,  606,    0,  606,    0,
  606,  606,  606,  606,   36,  606,   37,    0,    0,    0,
   38,    0,  606,    0,    0,  606,  606,    0,   39,   40,
    0,    0,   41,    0,    0,  748,    0,    0,    0,    0,
  606,  606,  606,  606,  606,    0,    0,    0,    0,    0,
    0,    0,  606,    0,    0,    0,    0,    0,  606,  606,
  606,  606,    0,    0,    0,  606,    0,  606,    0,    0,
    0,    0,    0,  606,  606,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  496,    0,    0,    0,  606,  606,
  606,  606,   56,   24,    0,   25,    0,    0,   26,  253,
    0,    0,    0,   27,   61,   62,  352,   28,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,    0,
   27,    0,    0,   32,    0,    0,    0,  334,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   27,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,   27,   80,   39,   40,
  254,   27,   41,  334,    0,    0,   27,    0,   27,   27,
   27,   27,    0,    0,   27,    0,   27,    0,    0,    0,
   27,    0,    0,    0,    0,    0,    0,   89,   90,   91,
  255,    0,   27,    0,    0,   27,    0,   27,    0,   95,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,    0,    0,    0,    0,    0,   27,   27,    0,
    0,    0,    0,    0,    0,    0,  334,  334,  334,  334,
  741,    0,    0,  334,  334,  105,  497,  334,  334,  334,
  334,  334,  334,  334,  334,  334,    0,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,    0,
   48,    0,   48,    0,   48,  334,   48,    0,  334,   48,
    0,   48,   48,    0,   48,    0,   48,    0,   48,    0,
   48,   48,   48,   48,    0,    0,   48,   48,    0,    0,
    0,    0,   48,   48,   48,   48,   48,    0,    0,   48,
    0,   48,    0,   48,    0,   48,   48,   48,   48,   48,
   48,   48,   48,    0,   48,   48,   48,   48,    0,    0,
   48,   48,   48,    0,   48,    0,    0,    0,    0,   48,
   48,    0,   48,   48,    0,   48,   48,   48,    0,    0,
    0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,    0,   48,   48,   47,    0,    0,    0,   47,
    0,   47,    0,    0,   47,    0,   47,   47,    0,   47,
    0,   47,    0,   47,    0,   47,   47,   47,   47,    0,
    0,   47,   47,    0,    0,    0,    0,   47,    0,   47,
   47,   47,    0,    0,   47,    0,   47,    0,   47,    0,
    0,   47,    0,   47,   47,   47,   47,   48,    0,    0,
   47,   47,   47,    0,    0,   47,   47,   47,    0,    0,
    0,    0,    0,    0,   47,   47,    0,   47,   47,    0,
   47,   47,   47,    0,    0,    0,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,    0,   47,    0,   47,    0,
   47,    0,   80,   47,    0,   47,   47,    0,   47,    0,
   47,   47,   47,    0,   47,   47,   47,   47,    0,    0,
   47,   47,    0,    0,    0,    0,   47,    0,   47,   47,
   47,    0,    0,   47,    0,   47,    0,   47,    0,    0,
   47,    0,   47,   47,   47,   47,    0,    0,    0,   47,
   47,   47,   47,    0,   47,   47,   47,    0,    0,    0,
    0,    0,    0,   47,   47,    0,   47,   47,    0,   47,
   47,   47,    0,    0,    0,   47,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,    0,   47,    0,   47,    0,   47,
    0,   81,   47,    0,   47,   47,    0,   47,    0,   47,
   47,   47,    0,   47,   47,   47,   47,    0,    0,   47,
   47,    0,    0,    0,    0,   47,    0,   47,   47,   47,
    0,    0,   47,    0,   47,    0,   47,    0,    0,   47,
    0,   47,   47,   47,   47,    0,    0,    0,   47,   47,
   47,   47,    0,   47,   47,   47,    0,    0,    0,    0,
    0,    0,   47,   47,    0,   47,   47,    0,   47,   47,
   47,    0,    0,    0,   47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
    0,   48,    0,   48,   47,    0,   48,    0,   48,   48,
  213,   48,    0,   48,    0,   48,    0,   48,   48,   48,
   48,    0,    0,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,    0,    0,   48,    0,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,   48,   48,    0,    0,   48,   48,   48,
   47,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,    0,   48,   48,   48,    0,    0,    0,   48,    0,
    0,    0,    0,   47,    0,    0,    0,   47,    0,   47,
    0,    0,   47,    0,   47,   47,    0,   47,   48,   47,
    0,   47,    0,   47,   47,   47,   47,    0,    0,   47,
   47,    0,    0,   48,    0,   47,    0,   47,   47,   47,
    0,    0,   47,    0,   47,  334,   47,    0,    0,   47,
    0,   47,   47,   47,   47,    0,    0,    0,   47,   47,
   47,    0,    0,   47,   47,   47,    0,    0,  334,    0,
    0,    0,   47,   47,   48,   47,   47,    0,   47,   47,
   47,  334,    0,    0,   47,    0,  334,    0,    0,  334,
    0,  334,    0,  334,  334,  334,  334,    0,    0,    0,
    0,  334,    0,    0,   47,  334,    0,    0,    0,  334,
  214,    0,    0,    0,    0,    0,    0,  334,    0,    0,
  334,    0,  334,   56,   24,    0,   25,    0,    0,   26,
  253,    0,    0,    0,   27,   61,   62,    0,   28,    0,
    0,  334,    0,    0,   64,    0,  334,   30,    0,    0,
    0,    0,    0,  334,   32,  264,    0,  334,    0,   33,
   47,   71,   72,   34,    0,  588,    0,    0,    0,    0,
  334,    0,  589,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  254,    0,   41,    0,    0,    0,    0,    0,    0,
  590,    0,  334,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,   93,    0,    0,    0,    0,    0,    0,    0,
   95,  916,    0,  591,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,  102,    0,    0,    0,    0,
    0,  103,  104,    0,    0,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  253,    0,    0,    0,
   27,   61,   62,    0,   28,    0,  105,  106,  107,  108,
   64,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,  588,    0,    0,    0,    0,    0,    0,  589,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  254,    0,   41,
    0,    0,    0,    0,    0,    0,  590,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,  591,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  253,    0,    0,    0,   27,   61,   62,    0,
   28,    0,  105,  106,  107,  108,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   71,   72,   34,    0,  588,    0,    0,
    0,    0,    0,    0,  589,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  254,    0,   41,    0,    0,    0,    0,
    0,    0,  590,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,   56,   24,    0,   25,    0,    0,   26,  253,    0,
    0,    0,   27,   61,   62,    0,   28,    0,  105,  106,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  254,
    0,   41,    0,    0,   84,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
  300,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,    0,  103,
  104,    0,    0,    0,    0,    0,    0,   56,   24,    0,
   25,    0,    0,   26,  253,    0,    0,    0,   27,   61,
   62,    0,   28,    0,  105,  301,  107,  108,   64,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,    0,   41,    0,    0,
    0,    0,    0,    0,   86,    0,    0,   87,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,   90,   91,   92,  300,    0,    0,    0,
    0,  875,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
    0,    0,    0,    0,    0,  103,  104,    0,    0,    0,
    0,    0,    0,   56,   24,    0,   25,    0,    0,   26,
  253,    0,    0,    0,   27,   61,   62,    0,   28,    0,
  105,  301,  107,  108,   64,    0,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,    0,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  254,    0,   41,    0,    0,    0,    0,    0,    0,
   86,    0,    0,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,   90,
   91,   92,  300,    0,    0,    0,  513,    0,    0,    0,
   95,    0,    0,    0,    0,    0,   97,   98,   99,  100,
    0,    0,    0,  101,    0,  102,    0,    0,    0,    0,
    0,  103,  104,    0,    0,    0,    0,    0,    0,   56,
   24,    0,   25,    0,    0,   26,  253,    0,    0,    0,
   27,   61,   62,    0,   28,    0,  105,  301,  107,  108,
   64,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,    0,    0,    0,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,   74,    0,    0,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  254,    0,   41,
    0,    0,    0,    0,    0,    0,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,  300,    0,
    0,    0,  507,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  253,    0,    0,    0,   27,   61,   62,    0,
   28,    0,  105,  301,  107,  108,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  254,    0,   41,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  300,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,   56,   24,    0,   25,    0,    0,   26,  253,    0,
    0,    0,   27,   61,   62,    0,   28,    0,  105,  301,
  107,  108,   64,    0,    0,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   33,    0,   71,
   72,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   37,   74,    0,    0,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  254,
    0,   41,    0,    0,    0,    0,    0,    0,   86,    0,
    0,   87,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   89,   90,   91,   92,
   93,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,    0,  103,
  104,    0,    0,    0,    0,    0,    0,   56,   24,    0,
   25,    0,    0,   26,  253,    0,    0,    0,   27,   61,
   62,    0,   28,    0,  105,  106,  107,  108,   64,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,    0,   41,    0,    0,
    0,    0,    0,    0,   86,    0,    0,   87,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,   90,   91,   92,   93,    0,    0,    0,
    0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
    0,    0,    0,    0,    0,  103,  104,    0,    0,    0,
    0,    0,    0,   77,   77,    0,   77,    0,    0,   77,
   77,    0,    0,    0,   77,   77,   77,    0,   77,    0,
  105, 1030,  107,  108,   77,    0,    0,   77,    0,    0,
    0,    0,    0,    0,   77,    0,    0,    0,    0,   77,
    0,   77,   77,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   77,    0,   77,   77,    0,
    0,   77,    0,    0,   77,    0,   77,    0,   77,   77,
   77,   77,    0,   77,    0,    0,    0,    0,    0,    0,
   77,    0,    0,   77,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
   77,   77,   77,    0,    0,    0,    0,    0,    0,    0,
   77,    0,    0,    0,    0,    0,   77,   77,   77,   77,
    0,    0,    0,   77,    0,   77,    0,    0,    0,    0,
    0,   77,   77,    0,    0,    0,    0,    0,    0,  135,
  135,    0,  135,    0,    0,  135,  135,    0,    0,    0,
  135,  135,  135,    0,  135,    0,   77,   77,   77,   77,
  135,    0,    0,  135,    0,    0,    0,    0,    0,    0,
  135,    0,    0,    0,    0,  135,    0,  135,  135,  135,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  135,    0,  135,  135,    0,    0,  135,    0,    0,
  135,    0,  135,    0,  135,  135,  135,  135,    0,  135,
    0,    0,    0,    0,    0,    0,  135,    0,    0,  135,
  135,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  135,  135,  135,  135,  135,    0,
    0,    0,    0,    0,    0,    0,  135,    0,    0,    0,
    0,    0,  135,  135,  135,  135,    0,    0,    0,  135,
    0,  135,    0,    0,    0,    0,    0,  135,  135,    0,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  253,    0,    0,    0,   27,   61,   62,    0,
   28,    0,  135,  135,  135,  135,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,   27,    0,
   27,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,   27,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  254,   27,   41,    0,    0,    0,   27,
    0,    0,    0,    0,   27,    0,   27,   27,   27,   27,
    0,    0,    0,    0,   27,    0,    0,    0,   27,    0,
   89,   90,   91,  255,  300,    0,    0,    0,    0,    0,
   27,    0,   95,   27,    0,   27,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,   27,
    0,    0,    0,    0,    0,   27,   27,    0,    0,    0,
    0,    0,    0,  639,    0,  639,    0,  639,  105,  256,
  639,  108,  639,  639,    0,  639,    0,  639,    0,  639,
    0,  639,  639,  639,    0,    0,    0,  639,  639,    0,
    0,    0,    0,  639,    0,  639,  639,    0,    0,    0,
  639,    0,    0,    0,  639,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  639,  639,    0,  639,    0,
    0,    0,  639,  639,    0,    0,    0,    0,    0,    0,
  639,  639,   56,   24,  639,   25,    0,  639,   26,  253,
    0,    0,  639,   27,   61,   62,    0,   28,    0,    0,
    0,    0,    0,   64,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,  639,  639,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,  639,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  254,    0,   41,    0,    0,   84,    0,    0,    0,    0,
    0,    0,   24,    0,   25,    0,    0,   26,  639, 1218,
    0,    0,   27,    0,    0,    0,   28,   89,   90,   91,
  255,    0,    0,    0,    0,   30,  638,    0,  638,   95,
    0,  638,   32,  638,  638,    0,  638,   33,  638, 1219,
  638,   34,  638,  638,  638,    0,    0,    0,  638,  638,
    0,    0,    0,   36,  638,   37,  638,  638,    0,   38,
 1220,  638,    0,    0,    0,  638,    0,   39,   40,    0,
    0,   41,    0,    0,  319,  105,  256,  638,    0,  638,
    0,    0,    0,  638,  638,    0,    0,    0,    0,    0,
    0,  638,  638,    0,  638,  638,  638,    0,  638,  638,
    0,  638,  638,  638,  638,    0,  638,    0,  638,    0,
  638,  638,  638,    0,    0,    0,  638,  638,    0,    0,
    0,    0,  638,    0,  638,  638,    0,    0,    0,  638,
    0,    0,    0,  638,    0,    0,    0,    0,  638,    0,
    0,    0,    0,    0,    0,  638,    0,  638,    0,    0,
    0,  638,  638,    0,    0,  352,    0,    0,    0,  638,
  638,    0,    0,  638,    0,    0,  638,    0,   24,    0,
   25,  638,    0,   26,    0,    0, 1280,    0,   27,  638,
  678,    0,   28,    0,  679, 1281, 1282,    0,    0,    0,
 1283,   30,    0,    0,    0,    0, 1284,    0,   32,    0,
   24,    0,   25,   33,    0,   26,    0,   34, 1280,    0,
   27,    0,  678,    0,   28,    0,  679, 1281, 1282,   36,
    0,   37, 1283,   30,    0,   38,    0,    0, 1284,    0,
   32,    0,    0,   39,   40,   33,    0,   41,    0,   34,
 1285,    0,    0,    0,   47, 1286,   47,  638,    0,   47,
    0,   36,    0,   37,   47,    0,    0,   38,   47,    0,
    0,    0,    0,    0,    0,   39,   40,   47,    0,   41,
    0,    0, 1285,    0,   47,    0,   47, 1286,   47,   47,
 1287,   47,    0,   47,    0,   47,   47,   47,    0,    0,
   47,    0,   47,    0,    0,   47,    0,   47,    0,   47,
    0,   47,    0,    0,   47,    0,   47,    0,    0,   47,
   47,   47,    0,   47,    0,   47,   47,   47,    0,   47,
   47, 1288,   47,    0,   47,   47,    0,   47,    0,   47,
   47,    0,    0,   47,   47,    0,   47,    0,    0,    0,
    0,   47,   47,   47,    0,   47,    0,    0,   47,    0,
   47,  154,   24, 1288,   25,   47,    0,   26,    0,   47,
    0,   47,   27,   47,    0,    0,   28,    0,   47,    0,
    0,   47,    0,   47,    0,   30,    0,   47,    0,    0,
   47,  154,   32,    0,    0,   47,   47,   33,    0,   47,
    0,   34,   47,  565,    0,    0,   24,   47,   25,    0,
  566,   26,    0,   36,    0,   37,   27,    0,    0,   38,
   28,    0,  567,    0,    0,    0,    0,   39,   40,   30,
    0,   41,    0,    0,  568,    0,   32,    0,    0,   47,
    0,   33,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  487,   36,  487,   37,
    0,  487,    0,   38,    0,    0,  487,    0,    0,    0,
  487,   39,   40,    0,    0,   41,    0,    0,  319,  487,
    0,    0,    0,   47,    0,    0,  487,    0,  174,    0,
  174,  487,    0,  174,    0,  487,    0,    0,  174,    0,
    0,    0,  174,    0,  290,    0,    0,  487,    0,  487,
    0,  174,    0,  487,    0,  569,    0,    0,  174,    0,
    0,  487,  487,  174,    0,  487,    0,  174,  487,    0,
    0,    0,  173,    0,  173,    0,    0,  173,    0,  174,
    0,  174,  173,    0,    0,  174,  173,    0,    0,    0,
    0,    0,    0,  174,  174,  173,    0,  174,    0,  320,
  174,    0,  173,    0,  183,    0,  183,  173,    0,  183,
    0,  173,    0,    0,  183,    0,    0,    0,  183,    0,
    0,    0,    0,  173,    0,  173,    0,  183,    0,  173,
    0,    0,    0,    0,  183,    0,    0,  173,  173,  183,
    0,  173,   33,  183,  173,    0,    0,    0,    0,  487,
    0,    0,    0,   33,    0,  183,    0,  183,   33,    0,
    0,  183,   33,    0,    0,   33,    0,    0,    0,  183,
  183,    0,    0,  183,    0,    0,  183,   33,   33,    0,
    0,  174,   33,   33,    0,    0,    0,    0,   33,    0,
   33,   33,   33,   33,    0,    0,    0,    0,   33,    0,
    0,    0,   33,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   33,    0,   33,   33,   31,   33,
    0,    0,    0,   33,    0,  173,    0,    0,    0,   31,
    0,    0,    0,    0,   31,    0,    0,    0,   31,    0,
    0,   31,    0,   33,    0,    0,    0,    0,    0,   33,
   33,    0,    0,   31,   31,    0,    0,  183,   31,   31,
    0,   47,    0,    0,   31,    0,   31,   31,   31,   31,
    0,    0,   47,    0,   31,    0,    0,   47,   31,    0,
   31,   47,    0,    0,   47,    0,    0,    0,    0,    0,
   31,    0,    0,   31,    0,   31,   47,   47,    0,   31,
    0,   47,   47,    0,   47,    0,    0,   47,    0,   47,
   47,   47,   47,    0,    0,   47,    0,   47,    0,   31,
   47,   47,    0,   47,   47,   31,   31,   47,    0,    0,
    0,    0,    0,   47,    0,    0,   47,    0,   47,   47,
   47,    0,   47,    0,   47,   47,   47,    0,    0,    0,
   47,    0,   47,   47,   47,   47,    0,    0,    0,    0,
   47,    0,   47,    0,   47,    0,   47,    0,   35,   47,
    0,    0,    0,    0,    0,    0,   47,    0,    0,   47,
    0,   47,   47,    0,   47,   47,    0,   47,    0,    0,
    0,    0,   47,    0,   47,   47,   47,   47,    0,    0,
    0,    0,   47,    0,    0,   47,   47,   47,    0,    0,
    0,   36,    0,    0,    0,    0,    0,    0,   47,    0,
   47,   47,   47,   47,    0,   47,    0,    0,    0,    0,
   47,    0,   47,   47,   47,   47,    0,    0,    0,    0,
   47,    0,    0,    0,   47,   47,    0,   47,    0,   47,
   47,    0,    0,  195,    0,    0,   47,    0,   47,   47,
   47,   47,   47,   47,    0,    0,    0,    0,   47,    0,
   47,   47,   47,   47,    0,    0,   47,    0,   47,    0,
    0,    0,   47,   47,    0,   47,    0,   47,   47,    0,
    0,  197,    0,    0,   47,    0,   47,   47,   47,   47,
    0,   47,    0,    0,    0,    0,   47,    0,   47,   47,
   47,   47,    0,    0,    0,    0,   47,    0,    0,    0,
   47,   47,    0,   47,    0,    0,    0,    0,   47,  298,
   47,    0,   47,    0,   47,   47,    0,   47,    0,   47,
    0,    0,    0,    0,   47,    0,   47,   47,   47,   47,
    0,   47,    0,    0,   47,    0,    0,    0,   47,    0,
    0,   47,    0,    0,   47,    0,    0,  299,  448,   47,
   47,    0,    0,   47,   47,   47,   47,   47,   47,   47,
    0,    0,   47,    0,   47,    0,    0,    0,   47,    0,
    0,  449,    0,    0,    0,    0,    0,    0,  448,   47,
   47,   47,   47,   47,  450,   47,    0,    0,  451,  452,
    0,    0,    0,    0,  453,    0,  454,  455,  456,  457,
    0,  449,    0,    0,  458,    0,    0,    0,  459,   47,
    0,    0,    0,    0,  450,    0,    0,    0,    0,  452,
  460,    0,    0,  461,  453,  462,  454,  455,  456,  457,
    0,    0,    0,    0,  458,    0,    0,    0,  459,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  463,
  460,    0,    0,  461,    0,  462,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  463,
  };
  protected static readonly short [] yyCheck = {            17,
    4,   17,  299,   17,   51,  511,    6,   18,  513,  298,
   51,  189,  234,  288,   17,  232,  247,  465,  188,  487,
   59,  297,  318,  554,   20,   84,  157, 1100,  329,  351,
  336,  295,  922,   77,    0,   47,  256, 1136, 1137,  771,
   59,  738,  571,  256,   58,   87,   88,  256,  579,  325,
  268,  256,  256,  256,  113,   73,  115,   17,  256,   77,
   17,  277,  256,  256,  256,   79,  108,   81,  256,  256,
   68,  256,  712,  113,  714,  115,  256,   95,   61,  256,
  256,  351,   65,   66,   67, 1184,   69,   70,  268,   87,
   88,   74,   75,  294,   92,  256,  268,  282,   81, 1225,
   83,  335,   85,  256,  268,  306,  256,   90,   91,  263,
  257,  256,  276,  256,  325,   17,  927, 1243,  758,   17,
 1183,  761,  191,   17,  371,   17,  877,  256,  657,  314,
    0,  114,  408,  376,  256,  366,  368,  888,  374,  157,
 1203,  157,  189,  157,  376,  343,  339,  363,  189,  294,
  363,  344,  256,  346,  157,   20,    0,  199,  200,  352,
  353,  315,  367,  339,  369,   59,  371,  256,  344,   63,
  346,  358,  256,  420,  172,   17,  352,  353,  381,  367,
  416,   17,   17,   17,  256,  232,  429,  340,  376,   17,
  256,  232,  256,  391,  256,  429,  368,  157,  418,  363,
  157,   17,  418,  419,  422,  418,  507,  418,  430,  418,
  715,  223,  429,  305,  418,  420,  414,  418,  423,  261,
  381,  510,   87,   88,  418,  375,  418,  549,  228,  247,
  428, 1294,  375,  418,  252, 1298,  429,  424,  425,  426,
  427,  418,  422,  108, 1055,  287,  285,  369,  554,  247,
  422,  320,  381,  429,  418,  157,  295,  527,  317,  157,
 1323,  259,  321,  157,  306,  157,  285,  326,  372,  257,
  288,  254,  899,  579,  257,  293,  294, 1403,  367,  549,
 1012,  256,  371,  352,  373,  374,  326,  376,  357,  307,
  374,  257,  381,  256,  312,  314,  314,  325,  370,  313,
  318,  571,  374,  418, 1430,  256,  348,  371,  374,  374,
  372,  355,  330,  331,  297,  157, 1442,  372, 1444, 1095,
  336,  157,  157,  157, 1397,  323,  415,  310,  857,  157,
  328,  256, 1029,  336,  199,  200,  658,  355,  256,  256,
  372,  157,  256,  385,  386,  985, 1078,  256,  366,  367,
  372,  416,  374,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,  381, 1463,  256,  435,  358,  366,  367,
  372,  413,  414,  256,  429,  305,  256, 1004,  341, 1006,
  256,  368,  429,  372,  889,  403,  256,  657,  429,  376,
  418,  285,  439, 1283, 1493,  370,  261,  429,  368,  374,
  868,  470,  349,  350,  700,  780,  369,  429,  678,  262,
  256,  335,  363,  257,  266,  413,  414,  415,  256,  370,
  314,  372,  287,  374,  436,  437,  368,  429,  272,  305,
  442,  806,  654,  277,  299,  431,  266,  281,  349,  350,
  429,  306,  336,  369,  369,  298,  821,  822,  418,  445,
  367,  369,  296,  717,  371,  686,  373,  374,  372,  376,
  369,  269,  314,  785,  381,  418,  480,  418,  487,  339,
 1110,  368,  349,  350,  979,  428,  277, 1117,  286,  323,
  281,  372,  429,  348,  314,  367,  351,  429,  486,  372,
  488,  509,  372,  511,  376,  513,  368,  367,  342,  482,
  569,  371, 1142,  373,  374,  375,  376,  368,  368,  523,
  524,  381,  581,  511,  583,  785,  585,  368,  429,  537,
  385,  386,  368,  375,  542,  378,  379,  256,  374,  527,
  368,  527,  429,  531,  856,  264,  374,  376,  554,  256,
  523,  342,  368, 1432, 1433,  375,  371,  561,  413,  414,
  376,  554,  429, 1209,  929, 1195,  931,  429,  933, 1335,
  263,  363,  372,  579,  374,  854,  431,  369,  429,  429,
  588,  589,  570,  256,  805,  256,  579,  272,  429,  648,
  445,  882,  277,   21,  391,  363,  281,  857, 1364, 1365,
  363, 1367,  368,  487,  363,  726,  325,  363, 1254,  668,
 1489,  296, 1378,  429,  367, 1381,  373,  414,  372,  376,
  886,  376,  315,  376,   52, 1146,  418,  635,  343,  429,
 1396,  428,  339,  641,  305,  922,  272,  344,  323,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  637,
  418,  639,  418,  343, 1420,  418, 1021,  342, 1023,  418,
  296,  368,  418,  370,  418,  372,  339,  374,  375,  376,
  554,  344,  527,  346,  373, 1209,  391,  376,  686,  352,
  353,  343, 1209, 1209,  272, 1143,  369,  323,  717,  679,
  373,  381,  700,  272,  549,  579,  982,  341,  686,  414,
  749,  391, 1209,  363,  357, 1209,  367,  715,  296,  369,
  371,  743,  720,  428,  702,  994,  571,  296,  369,  381,
 1254,  418,  429, 1088,  414,  369,  947, 1254, 1254,  391,
  381,  428,  339,  386,  766,  323,   59,  344,  428,  346,
  423,  745,  349,  350,  323,  352,  353, 1254,  256,  781,
 1254,  381,  414,  357, 1209,  763, 1121,  765,  418,  420,
 1209,  391, 1208, 1209,  752,  769,  428,  771,  370,  373,
   93,  371,  780,  373,   97,   98,   99,  100,  101,  102,
  103,  104,  386, 1229,  414,  387,  388,  339, 1153,  372,
  414,  357,  800,  376,  831,  386,  784,  805,  806, 1254,
  808, 1066,  657,  369,  428, 1254,  372,  373, 1254,  381,
 1256,  391,  800,  821,  822,  367, 1301,  805, 1114,  391,
  386, 1100,  429,  678,  376,  401,  858,  256,  712, 1314,
  714,  376, 1197,  414,  414,  823,  357,  413, 1103,  898,
  269,  367,  414,  339,  852,  339,  854,  428, 1333, 1214,
 1146,  371,  373,  839,  844,  421,  428,  286,  980,  367,
  368,  369,  870,  371,  372,  386,  374, 1027,  376,  877,
  418,  367, 1093,  367,  758, 1140, 1314,  761,  379,  887,
  357,  889,  306, 1179,  308,  368, 1008,  357,  743,  313,
 1385,  374,  373,  363,  294,  376,  373,    6,  381,  369,
  384,  325,  372,  373,  374,  893,  306,  895,   17,  386,
  418,  766,  420,  901,  389,  423,  386,  306,  382,  383,
  952,  929,  367,  931,  313,  933,  781,  394,  395,  367,
  785,  376,  396,  397,  367,  368,  325,  925,  376,  947,
  367,  372,  369,  376, 1003,  376,  367,  368,  418, 1156,
   59, 1216, 1447,  306,   63,  376,  367,  294,  944,  947,
  313,  368,  285, 1131,  954,  376,  956,  374,  958,  376,
  369,  979,  295,  372,  982,  963,  367,  300,   87,   88,
  371,  339,  373,  374,  839,  376,  344,  385,  346, 1484,
  381,  349,  350,  339,  352,  353, 1283,  368,  344,  108,
  346,  372,  857,  858, 1264,  376,  352,  353, 1012,  390,
 1506, 1507, 1272, 1021, 1226, 1023,  374, 1025,  370,  368,
  357,  400,  374,  372,  415,  374,  363,  376,  398,  399,
  370,  371,  369,  368,  374,  372,  373,  372,  374,  374,
  376,  376, 1036,  369,  371,  381,  373,  370,  157,  386,
  370,  371,  370,  373,  374,  375,  374,  418, 1066,  382,
  383,  384,  367,  368,  387,  388,  372,  922,  374,  371,
  376,  429, 1080, 1081, 1078,  370,  415,  372,  370,  374,
 1088,  418,  374,  277,  421, 1093,  372,  261,  374,  944,
  199,  200, 1100, 1094, 1131, 1103, 1133,  952,  376,  370,
 1131,  985,  370,  374,  372, 1093,  374,  372, 1114,  418,
  284,  376,  372, 1121,  418,  372,  376,  374, 1397, 1156,
 1128, 1114,  370,  297,  256, 1156,  374,  370,  302,  372,
  372,  305, 1140,  307,  376,  309,  310,  311,  312,  374,
 1146,  376,  376,  317,  372, 1153, 1154,  321,  376,  367,
 1187,  325,  261, 1146,  373,  370,  339,  372,  372,  333,
  374,  344,  336,  346,  338,  376,  349,  350,  376,  352,
  353, 1208, 1209, 1179,  294, 1207,  285, 1208,  287,  391,
  392,  393,  394,  386,  387,  388, 1179,  294,  362, 1197,
  299,  374, 1229,  370,  370,  372,  372,  306, 1229,  372,
    0,  374,  339,  368,  369,  314, 1214,  344, 1216,  346,
  354,  355,  349,  350,  343,  352,  353, 1254,  370, 1256,
  372,  370,  372,  372,  414, 1256, 1110,  336,  376, 1288,
 1114, 1263,  374, 1117,  376,  374,  374,  376,  376,  348,
  418,  374,  351,  376,  418,  369,  429,  418, 1280, 1281,
  354,  355, 1311,  576,  368,  369,  414,  415, 1142,  364,
  365,  418, 1146,  375, 1268,  376, 1325,  349,  350, 1257,
  372, 1303,  372,  373, 1306,  372,  385,  386,  368, 1134,
  364,  365,  374,  339, 1343,  372, 1345,  372,  344,  294,
  346,  294,  429,  349,  350, 1179,  352,  353,  374, 1098,
 1099,  389,  390,  372,  413,  414,  395,  396,  372,  374,
  261, 1195,  372,  376,  371, 1319,  256,   93,  294,  374,
  294,   97,   98,   99,  100,  101,  102,  103,  104,  375,
  381,  356,  372,  284, 1189,  374,  373,  375, 1375,    0,
  374,  373,  372,  418,  423,  381,  297,  374,  374,  429,
  374,  302, 1207,  374,  305, 1392,  307,  372,  309,  310,
  311,  312,  374,  367,  372,  372,  317,  421, 1405, 1406,
  321,  373,  343,  429,  325,  374,  294, 1385,  487, 1383,
  294,  374,  333,  418,  370,  336,  371,  338,  367, 1397,
  418,  375,  256,  256,  717, 1432, 1433,  374,  368,  256,
  256,  371,  280,  373,  374,  256, 1414,  367, 1263, 1264,
  368,  362,  381,  372,  371,  343,  373, 1272,  527,  371,
  370,  376,  392,  393,  372, 1280, 1281,  374, 1283,  374,
  376,  370,  423,  256, 1289,  392,  393,  372,  372, 1447,
  549,  347,  412,  381,  351,  554, 1301,  367, 1303,  381,
  420, 1306, 1489,  423,  381,  412,  372,  257,  256, 1314,
  368,  261,  571,  420,  347,  374,  423,  418,  370,  370,
  579,  375,  272,  370,  372,  375, 1484,  277, 1333,  339,
  348,  281,  368,  374,  284,    0, 1490, 1491,  418,  418,
  372,  376,  368, 1497, 1498,  348,  296,  297, 1506, 1507,
  367,  301,  302,  368,  381,  367,  367,  307,  261,  309,
  310,  311,  312,  356,  368,  374,  371,  317, 1506, 1507,
  368,  321,  368,  323,  300,  371,  376,  373,  374,  368,
  372,  284,  337,  333,  305,  371,  336,  418,  338,  418,
  369,  367,  342,  418,  297,  418,  392,  393,  657,  302,
  371,  376,  418,  329,  307,  371,  309,  310,  311,  312,
  371,  381,  362,  373,  317,  371,  412,  371,  321,  678,
  367,  372,  325,  381,  420,  369,  371,  423,  374,  372,
  333,  373,  373,  336,  374,  338,  374,  256,  374,  376,
  418,  372,  372,  370,  370,  256,  418,  376,  376,  418,
  372,  262,  376,  712,  418,  714,  382,  383,  384,  362,
  372,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  381,  367,  372,
  368,  381,  372,  370,  743,  368,  315,  298,  263,  371,
  371,  368,  372,  372,    0,    0,  367,  372,  376,  758,
  368,    0,  761,  368,  418,  372,  372,  766,  370,  367,
  370,    0,  368,  368,  367,  418,  418,  418,  372,  376,
  368,  372,  781,  372,  376,  368,  785,  368,  339,  367,
  372,  368,  372,  344,  368,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,  367,  376,  373,
  376,  376,  363,  376,  376,  376,  367,  368,  369,  370,
  371,  372,  373,  374,  375,  376,  376,  378,  379,  376,
  376,  382,  383,  384,  385,  386,  315,  263,  389,  390,
   50,  507,   12,  394,  395,  396,  397,  398,  399,  400,
  401,  256,    5,  944,  839, 1093,  261,  262,  857,  858,
  381, 1093,  413, 1256, 1400,  416, 1229,  418, 1437,  420,
 1388,  678,  423, 1417, 1453, 1383, 1289,  860,  429,  284,
  692,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411, 1498,  297,  298, 1301,  856,  860,  302,  860, 1254,
  305, 1320,  307, 1242,  309,  310,  311,  312, 1492, 1410,
  576, 1406,  317, 1491, 1405, 1187,  321, 1345,  831, 1289,
  325,    0, 1189,  922,  527,  882,  805,  720,  333,  800,
  589,  336,  366,  338,  339,  994,   71,  717,  686,  344,
  332,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  397,  952,  398,  401,  399,  362,  363,  400,
  402, 1168,  367,  368,  785,  370,  371,  372,  373,  374,
  375,  376, 1263,  378,  379, 1179,  381,  382,  383,  384,
  385,  386,  387,  388,  389,  390,  985,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  549,
  157,  416, 1057,  418, 1114,  420, 1081, 1008,  423, 1069,
 1071,    0,  965,  981,  429,  525, 1143,  256,  257,   -1,
  903,  421,  261, 1154,  837, 1259,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  836,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,  285,  287,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,  327,
   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,  338,
   -1, 1110,   -1,  342,   -1, 1114,   -1,   -1, 1117,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,   -1, 1134,   -1,   -1,   -1,  368,
  369,   -1,   -1, 1142,   -1,   -1,   -1, 1146,  377,  377,
  378,  379,  380,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,   -1,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
 1179,   -1,  261,   -1,   -1,   -1,   -1,   -1,    0,  418,
 1189,   -1,   -1,  272,   -1,   -1, 1195,   -1,  277,   -1,
   -1,   -1,  281,   -1,   -1,  284,   -1,   -1, 1207,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  882,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,  335,  336,   -1,  338,
   -1,   -1,   -1,  342, 1263, 1264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1272,   -1,   -1,   -1,  256,  257,   -1,
   -1, 1280, 1281,  362, 1283,  264,  265,  266,  267,  268,
  369,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,  280,   -1,   -1, 1303,   -1,  285, 1306,  287,  288,
  289,  290,  291,  292,    0,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,  368,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,  418,
  419,  420,   -1,  422,  256,  257,   -1,   -1,   -1,   -1,
  429,   -1,  264,  265,  266,  267,  268,   -1,  270,  271,
    0,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,  368,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,
  256,   -1,  384,   -1,  386,  261,  262,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  417,  418,  419,  420,   -1,
  422,  297,  298,   -1,   -1,   -1,  302,  429,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,
   -1,  367,  368,  369,  370,  371,  372,  373,  374,  375,
  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
  386,   -1,   -1,  389,  390,   -1,   -1,   -1,  394,  395,
  396,  397,  398,  399,  400,  401,  256,   -1,   -1,   -1,
    0,  261,  262,   -1,   -1,   -1,   -1,  413,   -1,   -1,
  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,   -1,
   -1,   -1,   -1,  429,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,    0,   -1,   -1,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,  256,   -1,   -1,  389,
  390,  261,  262,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  413,  284,   -1,  416,   -1,  418,   -1,
  420,   -1,   -1,  423,   -1,   -1,   -1,  297,  298,  429,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,  362,  363,    0,   -1,   -1,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,  256,   -1,   -1,  389,
  390,  261,  262,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,  413,  284,   -1,  416,   -1,  418,   -1,
  420,   -1,   -1,  423,   -1,   -1,   -1,  297,  298,  429,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
    0,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  256,   -1,  362,  363,   -1,   -1,  262,  367,  368,   -1,
  370,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,  298,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  413,   -1,   -1,  416,   -1,  418,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,    0,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,
   -1,  367,  368,   -1,  370,  371,  372,   -1,  374,  375,
  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
   -1,  257,   -1,  389,  390,  261,   -1,   -1,  394,  395,
  396,  397,  398,  399,  400,  401,  272,   -1,   -1,    0,
   -1,  277,   -1,   -1,   -1,  281,   -1,  413,  284,   -1,
  416,   -1,  418,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,  429,  257,  301,  302,   -1,  261,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,
   -1,  317,    0,   -1,  277,  321,   -1,  323,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,  335,
  336,   -1,  338,  296,  297,   -1,  342,  257,  301,  302,
   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  272,   -1,  317,    0,  362,  277,  321,   -1,
  323,  281,  368,  369,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,
   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,    0,  362,
   -1,  321,   -1,  323,   -1,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,
  257,   -1,  342,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
  277,   -1,  362,   -1,  281,   -1,   -1,  284,  368,  369,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  362,  257,  321,   -1,  323,
  261,   -1,  369,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,  272,  336,   -1,  338,   -1,  277,   -1,  342,   -1,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  362,  257,
  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  272,   -1,  317,   -1,   -1,  277,
  321,   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,
   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,
   -1,  362,  277,  321,   -1,  323,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  296,  297,   -1,  342,  257,  301,  302,   -1,  261,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,  256,  336,   -1,  338,   -1,   -1,   -1,
  342,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
  362,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
  256,  344,  345,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,   -1,
   -1,  384,  298,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  417,  418,  419,  420,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  429,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,  363,  298,   -1,
   -1,   -1,  368,  369,  370,  371,  372,  373,  374,  375,
  376,   -1,  378,  379,   -1,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,  256,
   -1,   -1,  418,   -1,  420,  262,   -1,  423,   -1,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,  368,   -1,
   -1,  371,   -1,  373,  374,   -1,   -1,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  298,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,
  420,   -1,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
  256,  378,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,  388,  389,  390,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,  256,   -1,
   -1,   -1,   -1,  420,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  368,   -1,  370,  262,  372,   -1,  374,  375,
  376,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,  298,  370,  371,  372,  373,  374,  375,  376,   -1,
  378,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  429,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,  256,   -1,   -1,
   -1,   -1,  420,  262,   -1,  423,   -1,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
   -1,  368,  369,   -1,  371,  372,  373,  374,   -1,  376,
   -1,  378,  379,   -1,  381,  382,  383,  384,  385,  298,
  387,  388,  389,  390,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,   -1,   -1,
   -1,  418,   -1,  420,   -1,   -1,  423,   -1,   -1,   -1,
  339,   -1,  429,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,  256,  256,   -1,   -1,
   -1,  420,  262,   -1,  423,   -1,  265,   -1,  267,   -1,
  429,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
   -1,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,  256,  256,   -1,   -1,  418,
  420,  262,   -1,  423,   -1,  265,   -1,  267,   -1,  429,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,   -1,  378,  379,   -1,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,  256,   -1,  261,   -1,  418,  420,
  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,   -1,   -1,  298,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  333,  266,
   -1,  336,   -1,  338,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,  362,   -1,   -1,
   -1,  298,   -1,   -1,   -1,   -1,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  314,   -1,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  256,  418,   -1,   -1,   -1,   -1,  420,   -1,
  357,  423,   -1,   -1,   -1,   -1,  363,  429,   -1,   -1,
   -1,  368,  369,  370,  371,  372,  373,  374,  375,  376,
   -1,  378,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,  388,  389,  390,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,  256,   -1,
   -1,  418,   -1,  420,  262,   -1,  423,   -1,   -1,   -1,
   -1,   -1,  429,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
  378,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
  388,  389,  390,   -1,   -1,   -1,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  256,  413,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  265,  429,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,
   -1,   -1,   -1,  288,   -1,   -1,  298,   -1,  293,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,  256,  318,   -1,   -1,   -1,  322,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  339,   -1,  334,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  418,   -1,   -1,  256,  429,   -1,   -1,
   -1,   -1,  262,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,  378,  379,   -1,   -1,  382,  383,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,
  394,  395,  396,  397,  398,  399,  400,  401,  298,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  429,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  256,  429,
   -1,   -1,   -1,   -1,  262,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  429,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
  378,  379,   -1,   -1,  382,  383,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
  394,  395,  396,  397,  398,  399,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  398,  399,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,   -1,
  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  385,   -1,   -1,   -1,   -1,  390,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  266,   -1,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  401,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  413,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  429,  374,  375,  376,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  401,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  413,   -1,   -1,   -1,   -1,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  429,   -1,  368,
  369,   -1,  371,   -1,  373,   -1,  375,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,  256,   -1,  418,
   -1,  420,   -1,   -1,  423,  264,  265,  266,  267,   -1,
  429,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  417,  418,  419,  420,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,
  418,  419,  420,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,  256,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,  256,   -1,  275,  276,
  277,  418,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,  320,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  418,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,  368,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  417,  418,  419,  420,
   -1,   -1,  264,  265,   -1,  267,   -1,  428,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,  320,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,
   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,  372,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  418,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  417,  418,  419,  420,   -1,   -1,  264,  265,   -1,
  267,   -1,  428,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
  370,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  417,  418,  419,  420,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  418,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,
  420,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  418,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  418,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  417,  418,  419,  420,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  418,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  418,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
  261,   -1,   -1,  295,   -1,   -1,   -1,  262,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,  297,  329,  330,  331,
  332,  302,  334,  298,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  362,   -1,   -1,   -1,   -1,   -1,  368,  369,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
  375,   -1,   -1,  378,  379,  417,  418,  382,  383,  384,
  385,  386,  387,  388,  389,  390,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,   -1,
  261,   -1,  263,   -1,  265,  420,  267,   -1,  423,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,  294,  295,  296,  297,   -1,   -1,  300,
   -1,  302,   -1,  304,   -1,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,  315,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  362,   -1,  364,  365,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,  418,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,  265,   -1,
  267,   -1,  368,  270,   -1,  272,  273,   -1,  275,   -1,
  277,  377,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,  418,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,  362,   -1,  265,   -1,  267,
   -1,  368,  270,   -1,  272,  273,   -1,  275,   -1,  277,
  377,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,  418,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,  362,   -1,  270,   -1,  272,  273,
  368,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
  418,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  362,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,  377,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,   -1,  302,  261,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,  284,   -1,
   -1,   -1,  330,  331,  418,  333,  334,   -1,  336,  337,
  338,  297,   -1,   -1,  342,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,  362,  321,   -1,   -1,   -1,  325,
  368,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  357,   -1,   -1,  285,   -1,  362,  288,   -1,   -1,
   -1,   -1,   -1,  369,  295,  371,   -1,  373,   -1,  300,
  418,  302,  303,  304,   -1,  306,   -1,   -1,   -1,   -1,
  386,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,  418,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,  372,   -1,  374,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,  374,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,
  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,  368,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,
  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,
  263,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,  284,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  297,  334,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  371,  336,   -1,  338,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,   -1,   -1,  368,  369,   -1,   -1,   -1,
   -1,   -1,   -1,  263,   -1,  265,   -1,  267,  417,  418,
  270,  420,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  316,   -1,  318,   -1,
   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,  264,  265,  334,  267,   -1,  337,  270,  271,
   -1,   -1,  342,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  364,  365,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,  377,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  418,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,  359,  360,  361,
  362,   -1,   -1,   -1,   -1,  288,  265,   -1,  267,  371,
   -1,  270,  295,  272,  273,   -1,  275,  300,  277,  302,
  279,  304,  281,  282,  283,   -1,   -1,   -1,  287,  288,
   -1,   -1,   -1,  316,  293,  318,  295,  296,   -1,  322,
  323,  300,   -1,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,  417,  418,  316,   -1,  318,
   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,  270,
   -1,  272,  273,  342,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,  323,   -1,   -1,  418,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,  265,   -1,
  267,  342,   -1,  270,   -1,   -1,  273,   -1,  275,  418,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
  265,   -1,  267,  300,   -1,  270,   -1,  304,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  316,
   -1,  318,  287,  288,   -1,  322,   -1,   -1,  293,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,   -1,   -1,   -1,  265,  342,  267,  418,   -1,  270,
   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  288,   -1,  334,
   -1,   -1,  337,   -1,  295,   -1,  265,  342,  267,  300,
  377,  270,   -1,  304,   -1,  306,  275,  308,   -1,   -1,
  279,   -1,  313,   -1,   -1,  316,   -1,  318,   -1,  288,
   -1,  322,   -1,   -1,  325,   -1,  295,   -1,   -1,  330,
  331,  300,   -1,  334,   -1,  304,  337,  306,   -1,  308,
  265,  418,  267,   -1,  313,  270,   -1,  316,   -1,  318,
  275,   -1,   -1,  322,  279,   -1,  325,   -1,   -1,   -1,
   -1,  330,  331,  288,   -1,  334,   -1,   -1,  337,   -1,
  295,  372,  265,  418,  267,  300,   -1,  270,   -1,  304,
   -1,  306,  275,  308,   -1,   -1,  279,   -1,  313,   -1,
   -1,  316,   -1,  318,   -1,  288,   -1,  322,   -1,   -1,
  325,  370,  295,   -1,   -1,  330,  331,  300,   -1,  334,
   -1,  304,  337,  306,   -1,   -1,  265,  418,  267,   -1,
  313,  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,
  279,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,  288,
   -1,  334,   -1,   -1,  337,   -1,  295,   -1,   -1,  418,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  265,  316,  267,  318,
   -1,  270,   -1,  322,   -1,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
   -1,   -1,   -1,  418,   -1,   -1,  295,   -1,  265,   -1,
  267,  300,   -1,  270,   -1,  304,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,  363,   -1,   -1,  316,   -1,  318,
   -1,  288,   -1,  322,   -1,  418,   -1,   -1,  295,   -1,
   -1,  330,  331,  300,   -1,  334,   -1,  304,  337,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  316,
   -1,  318,  275,   -1,   -1,  322,  279,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,  288,   -1,  334,   -1,  418,
  337,   -1,  295,   -1,  265,   -1,  267,  300,   -1,  270,
   -1,  304,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,  316,   -1,  318,   -1,  288,   -1,  322,
   -1,   -1,   -1,   -1,  295,   -1,   -1,  330,  331,  300,
   -1,  334,  261,  304,  337,   -1,   -1,   -1,   -1,  418,
   -1,   -1,   -1,  272,   -1,  316,   -1,  318,  277,   -1,
   -1,  322,  281,   -1,   -1,  284,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,  296,  297,   -1,
   -1,  418,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,  335,  336,  261,  338,
   -1,   -1,   -1,  342,   -1,  418,   -1,   -1,   -1,  272,
   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,  362,   -1,   -1,   -1,   -1,   -1,  368,
  369,   -1,   -1,  296,  297,   -1,   -1,  418,  301,  302,
   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,
  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,
   -1,  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,  362,
  277,  321,   -1,  323,  281,  368,  369,  284,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,
  297,   -1,  342,   -1,  301,  302,  261,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,  362,   -1,  321,   -1,  323,   -1,  368,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  297,   -1,  261,  342,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,  362,  321,  284,   -1,   -1,
   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
  297,  336,  261,  338,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,  284,   -1,  362,   -1,  364,
  365,   -1,   -1,  368,   -1,   -1,  333,   -1,  297,  336,
  261,  338,  263,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,
   -1,   -1,  321,  284,   -1,  362,   -1,  364,  365,   -1,
   -1,  368,   -1,   -1,  333,   -1,  297,  336,  261,  338,
   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,  284,   -1,  362,   -1,   -1,   -1,   -1,  261,  368,
  263,   -1,  333,   -1,  297,  336,   -1,  338,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,  362,   -1,   -1,  297,   -1,   -1,  368,  261,  302,
  333,   -1,   -1,  336,  307,  338,  309,  310,  311,  312,
   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,  261,  362,
  333,  364,  365,  336,  297,  338,   -1,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,  321,  362,
   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,  302,
  333,   -1,   -1,  336,  307,  338,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
  };

#line 6565 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.Compiler.Report)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);

#if FULL_AST
	lbag = new LocationsBag ();
#else
	lbag = null;
#endif
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int GET = 364;
  public const int SET = 365;
  public const int LAST_KEYWORD = 366;
  public const int OPEN_BRACE = 367;
  public const int CLOSE_BRACE = 368;
  public const int OPEN_BRACKET = 369;
  public const int CLOSE_BRACKET = 370;
  public const int OPEN_PARENS = 371;
  public const int CLOSE_PARENS = 372;
  public const int DOT = 373;
  public const int COMMA = 374;
  public const int COLON = 375;
  public const int SEMICOLON = 376;
  public const int TILDE = 377;
  public const int PLUS = 378;
  public const int MINUS = 379;
  public const int BANG = 380;
  public const int ASSIGN = 381;
  public const int OP_LT = 382;
  public const int OP_GT = 383;
  public const int BITWISE_AND = 384;
  public const int BITWISE_OR = 385;
  public const int STAR = 386;
  public const int PERCENT = 387;
  public const int DIV = 388;
  public const int CARRET = 389;
  public const int INTERR = 390;
  public const int DOUBLE_COLON = 391;
  public const int OP_INC = 392;
  public const int OP_DEC = 393;
  public const int OP_SHIFT_LEFT = 394;
  public const int OP_SHIFT_RIGHT = 395;
  public const int OP_LE = 396;
  public const int OP_GE = 397;
  public const int OP_EQ = 398;
  public const int OP_NE = 399;
  public const int OP_AND = 400;
  public const int OP_OR = 401;
  public const int OP_MULT_ASSIGN = 402;
  public const int OP_DIV_ASSIGN = 403;
  public const int OP_MOD_ASSIGN = 404;
  public const int OP_ADD_ASSIGN = 405;
  public const int OP_SUB_ASSIGN = 406;
  public const int OP_SHIFT_LEFT_ASSIGN = 407;
  public const int OP_SHIFT_RIGHT_ASSIGN = 408;
  public const int OP_AND_ASSIGN = 409;
  public const int OP_XOR_ASSIGN = 410;
  public const int OP_OR_ASSIGN = 411;
  public const int OP_PTR = 412;
  public const int OP_COALESCING = 413;
  public const int OP_GENERICS_LT = 414;
  public const int OP_GENERICS_LT_DECL = 415;
  public const int OP_GENERICS_GT = 416;
  public const int LITERAL = 417;
  public const int IDENTIFIER = 418;
  public const int OPEN_PARENS_LAMBDA = 419;
  public const int OPEN_PARENS_CAST = 420;
  public const int GENERIC_DIMENSION = 421;
  public const int DEFAULT_COLON = 422;
  public const int OPEN_BRACKET_EXPR = 423;
  public const int EVAL_STATEMENT_PARSER = 424;
  public const int EVAL_COMPILATION_UNIT_PARSER = 425;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 426;
  public const int DOC_SEE = 427;
  public const int GENERATE_COMPLETION = 428;
  public const int COMPLETE_COMPLETION = 429;
  public const int UMINUS = 430;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
